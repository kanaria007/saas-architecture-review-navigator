{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SaaS Architecture Review Navigator","text":"<p>A structured, field-tested design perspective navigator for SaaS architects, engineers, and reviewers. 52 perspectives / 9 categories / 2 structural levels \u2014 all mapped and linked.</p>"},{"location":"#what-is-this","title":"\ud83e\udded What Is This?","text":"<p>This navigator helps distributed system designers avoid blind spots by checking critical architecture perspectives across:</p> <ul> <li>Domain modeling</li> <li>Data structure and consistency</li> <li>API design and schema governance</li> <li>Event-driven architecture</li> <li>Performance and scalability</li> <li>Authorization and security</li> <li>Testing and release operations</li> <li>Availability and failure handling</li> <li>Operational/non-functional requirements</li> </ul> <p>Each perspective is a focused, atomic <code>.md</code> file:</p> <ul> <li>\ud83d\udd0d Design risk it addresses  </li> <li>\u2705 Good examples and practices  </li> <li>\u26a0\ufe0f Typical failure patterns  </li> <li>\u2753 Key FAQ  </li> <li>\ud83d\udd17 Related perspectives</li> </ul>"},{"location":"#categories","title":"\ud83d\udcc2 Categories","text":"<ul> <li>\ud83c\udff7\ufe0f <code>domain/</code> \u2014 abstraction, constraints, permissions</li> <li>\ud83d\udce6 <code>data/</code> \u2014 schema lifecycle, migration, indexing</li> <li>\ud83c\udf10 <code>api/</code> \u2014 contract design, versioning, authz</li> <li>\ud83d\udd01 <code>event/</code> \u2014 async design, retries, fallout zones</li> <li>\ud83d\udcca <code>performance/</code> \u2014 latency, scale, resource limits</li> <li>\ud83c\udfa8 <code>ui/</code> \u2014 rendering cost, notification design</li> <li>\ud83e\uddea <code>test/</code> \u2014 boundary tests, load, acceptance</li> <li>\ud83d\ude80 <code>release/</code> \u2014 rollout strategy, rollback design</li> <li>\ud83d\udd30 <code>availability/</code> \u2014 failure response, backup, recovery</li> <li>\ud83d\udee1 <code>non-functional/</code> \u2014 monitoring, security, ops</li> </ul>"},{"location":"#structural-levels","title":"\ud83e\udde9 Structural Levels","text":"<ul> <li>Structure: architectural separation, clarity, responsibility  </li> <li>DeepDive: failure handling, tradeoffs, operational edge cases</li> </ul> <p>Use the sidebar or navigation to explore perspectives by category or concept.</p>"},{"location":"#meta","title":"\ud83d\udcac Meta","text":"<ul> <li>Created by Kanaria </li> <li>Authored in Japanese, translated to English via AI  </li> <li>Licensed under MIT  </li> <li>Contributions welcome (see CONTRIBUTING.md)</li> </ul>"},{"location":"#design-philosophy","title":"\ud83e\udde0 Design Philosophy","text":"<p>This is not a tutorial. It is a design navigator. Built to help teams ask better questions before code is written.</p>"},{"location":"contributing/","title":"Contribution Guidelines","text":"<p>Thanks for your interest in improving this design navigator.</p> <p>This repository aims to provide a clear, opinionated, and minimally biased design perspective framework. All contributions are appreciated, but some boundaries are enforced to preserve its structural and philosophical intent.</p>"},{"location":"contributing/#accepted-contributions","title":"\u2705 Accepted Contributions","text":"<p>The following types of contributions are welcome:</p> <ul> <li> <p>\u2705 Spelling, grammar, and clarity fixes   Improve readability or phrasing in English without altering meaning.</p> </li> <li> <p>\u2705 Formatting or structural consistency   Aligning Markdown conventions, improving navigation links, or anchor fixes.</p> </li> <li> <p>\u2705 Linking related perspectives   Adding or correcting internal references between design documents.</p> </li> <li> <p>\u2705 Minor content clarification   Rewording for precision or developer comprehension, if meaning is preserved.</p> </li> <li> <p>\u2705 Improving GitHub workflow integration   Enhancements like better <code>mkdocs.yml</code> config, GitHub Pages setup, or contributor tooling.</p> </li> </ul>"},{"location":"contributing/#not-accepted","title":"\ud83d\udeab Not Accepted","text":"<p>The following changes are unlikely to be merged:</p> <ul> <li> <p>\u274c Rewriting design logic or structure   This repository reflects a specific architectural worldview.   Alternate philosophies should be developed in forks.</p> </li> <li> <p>\u274c Turning the content into tutorials or textbooks   The goal is decision-making scaffolding, not step-by-step guides.</p> </li> <li> <p>\u274c Adding product/vendor-specific patterns   This navigator is intended to be SaaS-agnostic and structurally general.</p> </li> <li> <p>\u274c Injecting AI-generated or templated content without human curation   All content must be conceptually and structurally vetted.</p> </li> </ul>"},{"location":"contributing/#if-youre-unsure","title":"\ud83e\udded If You're Unsure","text":"<p>If you're not sure whether your idea fits, open a GitHub Discussion or Issue. We're happy to give guidance as long as the project philosophy is respected.</p>"},{"location":"contributing/#tone-and-respect","title":"\ud83e\udd1d Tone and Respect","text":"<p>Please be kind and constructive. This is a project written by a non-native English speaker, with the help of AI, to share knowledge across language barriers. Your suggestions are welcome \u2014 and so is your patience.</p>"},{"location":"contributing/#local-setup-for-devs","title":"\ud83d\udee0 Local Setup (for devs)","text":"<p>To preview or run the documentation site locally:</p> <p>```bash pip install mkdocs-material mkdocs serve</p>"},{"location":"navigation-map/","title":"\ud83d\uddfa Navigation Map by Category","text":""},{"location":"navigation-map/#api","title":"API","text":"<ul> <li>\ud83d\udcd0 Api Compatibility Strategy</li> <li>\ud83d\udcd0 Api Permission Control</li> <li>\ud83d\udcd0 Api Schema Coherence</li> <li>\ud83d\udd2c Privilege Escalation Risk</li> <li>\ud83d\udcd0 Sync Vs Async Boundaries</li> </ul>"},{"location":"navigation-map/#availability","title":"Availability","text":"<ul> <li>\ud83d\udd2c Backup Strategy</li> <li>\ud83d\udd2c Data Recovery Plan</li> <li>\ud83d\udd2c Failover Design</li> </ul>"},{"location":"navigation-map/#common","title":"Common","text":"<ul> <li>\ud83d\udcd0 Design Justification</li> </ul>"},{"location":"navigation-map/#data","title":"Data","text":"<ul> <li>\ud83d\udcd0 Index Design</li> <li>\ud83d\udd2c Distributed Transaction Design</li> <li>\ud83d\udd2c Fallback Strategy</li> <li>\ud83d\udcd0 Indexing Strategy</li> <li>\ud83d\udcd0 Lifecycle Clarity</li> <li>\ud83d\udcd0 Migration Impact</li> <li>\ud83d\udcd0 Normalization Balance</li> <li>\ud83d\udd2c Retry Consistency</li> <li>\ud83d\udd2c Write Contention</li> </ul>"},{"location":"navigation-map/#domain","title":"Domain","text":"<ul> <li>\ud83d\udcd0 Domain Permissions</li> <li>\ud83d\udcd0 Domain Separation</li> <li>\ud83d\udcd0 Domain Validation</li> <li>\ud83d\udcd0 Inheritance Integrity</li> <li>\ud83d\udcd0 Invalid States</li> </ul>"},{"location":"navigation-map/#event","title":"Event","text":"<ul> <li>\ud83d\udcd0 Cross Service Consistency</li> <li>\ud83d\udd2c Event Retry Delay</li> <li>\ud83d\udd2c External Failure Impact</li> <li>\ud83d\udcd0 Sync Async Alignment</li> </ul>"},{"location":"navigation-map/#non-functional","title":"Non-functional","text":"<ul> <li>\ud83d\udd2c Logging For Troubleshooting</li> <li>\ud83d\udd2c Observability Alerting</li> <li>\ud83d\udcd0 Operational Burden</li> <li>\ud83d\udd2c Recovery Runbook</li> <li>\ud83d\udcd0 Security Risks</li> </ul>"},{"location":"navigation-map/#performance","title":"Performance","text":"<ul> <li>\ud83d\udcd0 Api Response Latency</li> <li>\ud83d\udd2c Backend Bottlenecks</li> <li>\ud83d\udcd0 Cache Strategy</li> <li>\ud83d\udd2c Db Index Optimization</li> <li>\ud83d\udd2c External Pressure Resilience</li> <li>\ud83d\udd2c Indexing Paths</li> <li>\ud83d\udd2c Scaling Strategy</li> </ul>"},{"location":"navigation-map/#release","title":"Release","text":"<ul> <li>\ud83d\udd2c Impact Analysis For Critical Changes</li> <li>\ud83d\udd2c Minimize Downtime</li> <li>\ud83d\udcd0 Release Strategy Planning</li> <li>\ud83d\udd2c Rollback Strategy</li> <li>\ud83d\udd2c Staged Release Strategy</li> <li>\ud83d\udcd0 User Notification Preparation</li> </ul>"},{"location":"navigation-map/#test","title":"Test","text":"<ul> <li>\ud83d\udcd0 Acceptance Criteria Definition</li> <li>\ud83d\udd2c High Load Behavior Testing</li> <li>\ud83d\udcd0 Impact Scope Analysis</li> <li>\ud83d\udcd0 Performance Test Plan</li> </ul>"},{"location":"navigation-map/#ui","title":"UI","text":"<ul> <li>\ud83d\udcd0 Component Reuse Impact</li> <li>\ud83d\udcd0 Data Volume Visibility</li> <li>\ud83d\udcd0 Notification Localization</li> </ul>"},{"location":"structure-vs-deepdive/","title":"Structure vs DeepDive","text":"<p>This framework distinguishes between two levels of architectural design perspectives:</p> <ul> <li>Structure: Focused on design fundamentals, responsibility separation, and abstraction clarity.</li> <li>DeepDive: Focused on complex implementations, performance, failure handling, and reliability.</li> </ul> <p>Use both axes to balance high-level clarity and low-level risk management.</p>"},{"location":"categories/api/api-compatibility-strategy/","title":"Does Your API Design Prevent Breaking Changes?","text":"<p>Type: Structure Category: API Audience: Engineers defining public interfaces, backend/FE integration contracts, or versioning policies</p>"},{"location":"categories/api/api-compatibility-strategy/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>APIs aren\u2019t functions\u2014they\u2019re promises.</p> <p>And promises must not break.</p> <ul> <li>Field removals, enum expansions, nullability changes\u2014small tweaks can ruin real systems  </li> <li>Compatibility is about trust: client code expects you to change carefully</li> </ul>"},{"location":"categories/api/api-compatibility-strategy/#breaking-change-patterns","title":"\ud83d\udea8 Breaking Change Patterns","text":"<ul> <li>Removing or renaming response fields without fallback  </li> <li>Changing default values or error structures  </li> <li>Expanding enums without guarding old clients  </li> <li>Using same endpoint name for incompatible behavior</li> </ul>"},{"location":"categories/api/api-compatibility-strategy/#better-compatibility-design","title":"\u2705 Better Compatibility Design","text":"<ul> <li>Define schema evolution policy (additive, backward-safe)  </li> <li>Document \u201cdeprecated-but-present\u201d as a lifecycle stage  </li> <li>Use explicit versioning in API path or header  </li> <li>Maintain changelog with client-visible impact annotations  </li> <li>Validate compatibility in CI using schema diffing</li> </ul>"},{"location":"categories/api/api-compatibility-strategy/#key-principle","title":"\u26a0\ufe0f Key Principle","text":"<p>Stability is not about freezing. It\u2019s about changing predictably\u2014and visibly.</p>"},{"location":"categories/api/api-compatibility-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just fix clients when something breaks? A: Not if the clients are mobile apps, third parties, or live dashboards.</p> </li> <li> <p>Q: Should we version every change? A: No\u2014but you should track every change.</p> </li> </ul>"},{"location":"categories/api/api-compatibility-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] API versioning and contract testing  </li> <li>[ ] Schema change observability  </li> <li>[ ] Consumer impact forecasting  </li> </ul>"},{"location":"categories/api/api-permission-control/","title":"Is Your API Permission Design Explicit and Secure?","text":"<p>Type: Structure Category: API Audience: Engineers handling multi-tenant auth, RBAC, or endpoint security</p>"},{"location":"categories/api/api-permission-control/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>APIs are often wide open\u2014not because of malice, but because permission logic is missing, scattered, or implied.</p> <ul> <li>Security = access control + clarity  </li> <li>Especially in B2B SaaS, per-role API behavior must be intentional</li> </ul>"},{"location":"categories/api/api-permission-control/#risk-patterns","title":"\ud83d\udea8 Risk Patterns","text":"<ul> <li>UI hides buttons, but API accepts all requests  </li> <li>Permission logic split across UI, controller, domain  </li> <li>No test coverage for unauthorized access  </li> <li>No centralized definition of who can do what</li> </ul>"},{"location":"categories/api/api-permission-control/#stronger-api-permission-design","title":"\u2705 Stronger API Permission Design","text":"<ul> <li>Use domain-layer methods like <code>Document.canView(user)</code> to encapsulate business rules  </li> <li>At use-case or controller layer, assert permission explicitly at the start  </li> <li>Define role \u2192 permission \u2192 action mappings (e.g. in enums or policies)  </li> <li>Avoid \"soft-deny\": reject unauthorized access early and loudly  </li> <li>Audit all permission decisions in logs</li> </ul>"},{"location":"categories/api/api-permission-control/#principle","title":"\u26a0\ufe0f Principle","text":"<p>You can\u2019t debug what you never defined. Permission must be part of the architecture\u2014not just the UI.</p>"},{"location":"categories/api/api-permission-control/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just trust the frontend to hide restricted actions? A: Never. The client can lie.</p> </li> <li> <p>Q: What if permission rules keep changing? A: Use policy-based access patterns to isolate volatility.</p> </li> </ul>"},{"location":"categories/api/api-permission-control/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Role/Permission schema governance  </li> <li>[ ] Authorization test coverage  </li> <li>[ ] Security-in-depth for multi-layer enforcement  </li> </ul>"},{"location":"categories/api/api-schema-coherence/","title":"Is the API Schema Coherent Across the System?","text":"<p>Type: Structure Category: API Audience: Backend engineers, API designers, frontend integrators</p>"},{"location":"categories/api/api-schema-coherence/#what-this-perspective-asks","title":"\ud83e\udde0 What This Perspective Asks","text":"<ul> <li>Are schemas consistent across endpoints and services?  </li> <li>Do field names and nesting follow clear rules?  </li> <li>Can clients rely on structure\u2014or must they guess each time?</li> </ul> <p>This isn\u2019t about correctness. It\u2019s about legibility and trust.</p>"},{"location":"categories/api/api-schema-coherence/#common-anti-patterns","title":"\ud83d\udea8 Common Anti-Patterns","text":"<ul> <li>Same concept \u2192 different names on different endpoints  </li> <li>Inconsistent casing, nesting, nullability defaults  </li> <li>Error formats differ per service  </li> <li>Schema evolution breaks old clients due to lack of compatibility design</li> </ul>"},{"location":"categories/api/api-schema-coherence/#healthier-schema-design","title":"\u2705 Healthier Schema Design","text":"<ul> <li>Enforce global schema conventions (naming, nesting, status codes)  </li> <li>Use shared schema libraries or contract tooling (e.g. OpenAPI, Protobuf)  </li> <li>Explicitly version schemas\u2014even internally  </li> <li>Separate transport schema (API) from domain model (logic layer)  </li> <li>Validate schema diffs in CI with backward compatibility checks</li> </ul>"},{"location":"categories/api/api-schema-coherence/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Schema is not documentation. Schema is contracted behavior\u2014and must be designed as such.</p>"},{"location":"categories/api/api-schema-coherence/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can we evolve schemas without breaking clients? A: Only if you design versioning and fallback into the contract.</p> </li> <li> <p>Q: Isn\u2019t schema just data shape? A: No. It\u2019s a long-term interface between independent actors.</p> </li> </ul>"},{"location":"categories/api/api-schema-coherence/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Schema change management  </li> <li>[ ] API versioning strategy  </li> <li>[ ] Error model consistency  </li> </ul>"},{"location":"categories/api/privilege-escalation-risk/","title":"Does Your System Prevent Privilege Escalation?","text":"<p>Type: DeepDive Category: API Audience: Security architects, API reviewers, backend engineers in multi-tenant SaaS</p>"},{"location":"categories/api/privilege-escalation-risk/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Not all security breaches are intrusions. Some are misdesigns\u2014where the system lets users access more than they should.</p>"},{"location":"categories/api/privilege-escalation-risk/#common-escalation-paths","title":"\ud83d\udea8 Common Escalation Paths","text":"<ul> <li>\u201cReadonly\u201d roles can perform side effects through indirect APIs  </li> <li>Shared tenants leak access when tenant IDs aren't strictly checked  </li> <li>Admin-only endpoints get exposed via misconfigured gateways  </li> <li>Logic flaws confuse \u201cownership\u201d with \u201cvisibility\u201d</li> </ul>"},{"location":"categories/api/privilege-escalation-risk/#safer-authorization-design","title":"\u2705 Safer Authorization Design","text":"<ul> <li>Use explicit permission checks at entrypoint\u2014not deep inside logic  </li> <li>Validate resource ownership for every operation\u2014not just access  </li> <li>Treat tenant boundaries as isolation contracts, not just filters  </li> <li>Audit for privilege elevation paths (e.g. role-switch, token leakage)  </li> <li>Test for \u201csilent escalation\u201d via combination of API calls</li> </ul>"},{"location":"categories/api/privilege-escalation-risk/#key-insight","title":"\u26a0\ufe0f Key Insight","text":"<p>Privilege escalation doesn\u2019t feel like a bug. Which is why it must be tested as a feature.</p>"},{"location":"categories/api/privilege-escalation-risk/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we rely on role-based checks alone? A: Not if actions depend on data ownership or context.</p> </li> <li> <p>Q: Should every access path be tested manually? A: Automate for known paths. Red-team for the unknown ones.</p> </li> </ul>"},{"location":"categories/api/privilege-escalation-risk/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Role isolation strategy  </li> <li>[ ] API boundary enforcement  </li> <li>[ ] Multi-tenant access validation  </li> </ul>"},{"location":"categories/api/sync-vs-async-boundaries/","title":"Are You Clear About When to Use Sync vs Async APIs?","text":"<p>Type: Structure Category: API Audience: Engineers defining API contracts, frontend/backend flows, or task orchestration</p>"},{"location":"categories/api/sync-vs-async-boundaries/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>The problem isn't just how to implement async. It's where to draw the line\u2014and why.</p>"},{"location":"categories/api/sync-vs-async-boundaries/#common-confusions","title":"\ud83d\udea8 Common Confusions","text":"<ul> <li>Sync endpoints that take 5+ seconds \u2192 client timeouts  </li> <li>Async endpoints with no status feedback \u2192 user uncertainty  </li> <li>APIs trigger long workflows but respond instantly without confirming outcome  </li> <li>Event queues treated as invisible black boxes</li> </ul>"},{"location":"categories/api/sync-vs-async-boundaries/#clearer-boundaries","title":"\u2705 Clearer Boundaries","text":"<ul> <li>Sync APIs: when immediate feedback or result is required  </li> <li>Async APIs: for delegated, long-running, or retry-prone actions  </li> <li>Always offer a follow-up API to check async job status  </li> <li>Make contract-level expectations clear (e.g. SLAs, response time, finality)  </li> <li>Document side effects and propagation timelines for async calls</li> </ul>"},{"location":"categories/api/sync-vs-async-boundaries/#core-insight","title":"\u26a0\ufe0f Core Insight","text":"<p>The difference isn\u2019t latency. It\u2019s contract shape and system responsibility.</p>"},{"location":"categories/api/sync-vs-async-boundaries/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can we just make everything async? A: Only if you design for it: status, feedback, and monitoring included.</p> </li> <li> <p>Q: Should we let clients poll for results? A: Yes, but offer smart strategies: callbacks, webhooks, push if needed.</p> </li> </ul>"},{"location":"categories/api/sync-vs-async-boundaries/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Async workflow visibility  </li> <li>[ ] API latency contract  </li> <li>[ ] Status model for background jobs  </li> </ul>"},{"location":"categories/async/cross-service-consistency/","title":"Is Cross-Service Consistency Guaranteed\u2014or Just Hoped For?","text":"<p>Type: Structure Category: Async Audience: Engineers working on service integration, microservice orchestration, or eventual consistency design</p>"},{"location":"categories/async/cross-service-consistency/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>When one service updates state\u2014 how do you ensure the others agree?</p> <ul> <li>Event published \u2260 event received  </li> <li>Downstream updates might arrive late, or not at all  </li> <li>State might \u201clook\u201d right, but be structurally divergent</li> </ul>"},{"location":"categories/async/cross-service-consistency/#failure-scenarios","title":"\ud83d\udea8 Failure Scenarios","text":"<ul> <li>Event loss: system A updates, B never sees the change  </li> <li>Out-of-order delivery \u2192 B overwrites A\u2019s latest data  </li> <li>Conflict resolution policies undefined \u2192 inconsistent recovery  </li> <li>No alerting for downstream update drift</li> </ul>"},{"location":"categories/async/cross-service-consistency/#design-for-real-consistency","title":"\u2705 Design for Real Consistency","text":"<ul> <li>Use event versioning and schema contracts  </li> <li>Track causal links: what triggered what?  </li> <li>Implement reconciliation jobs for long-term consistency  </li> <li>Prefer eventual over \u201cpretend real-time\u201d sync  </li> <li>Monitor consistency lag across services\u2014not just delivery</li> </ul>"},{"location":"categories/async/cross-service-consistency/#key-shift","title":"\u26a0\ufe0f Key Shift","text":"<p>Don\u2019t assume the system is consistent. Design it to notice when it isn\u2019t.</p>"},{"location":"categories/async/cross-service-consistency/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: But we use event delivery guarantees. Isn\u2019t that enough? A: Guarantees cover delivery, not correctness.</p> </li> <li> <p>Q: Can\u2019t we just trust retries? A: Not without idempotence and visibility.</p> </li> </ul>"},{"location":"categories/async/cross-service-consistency/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Eventual consistency strategy  </li> <li>[ ] Consistency lag visibility  </li> <li>[ ] Schema versioning between services  </li> </ul>"},{"location":"categories/async/event-retry-delay/","title":"Are Event Delays and Retries Part of Your Design\u2014or Just Runtime Surprises?","text":"<p>Type: Structure Category: Async Audience: Engineers building event-driven systems, workflows, or async pipelines</p>"},{"location":"categories/async/event-retry-delay/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Async systems fail differently. They don\u2019t crash. They drift.</p> <ul> <li>Retry loops that hide real failure  </li> <li>Invisible delays that break UX or violate SLAs  </li> <li>Side effects triggered multiple times without awareness</li> </ul>"},{"location":"categories/async/event-retry-delay/#common-anti-patterns","title":"\ud83d\udea8 Common Anti-Patterns","text":"<ul> <li>Retry forever on transient failures \u2192 permanent backlog  </li> <li>No delay compensation in UX \u2192 users spam reload  </li> <li>Events reordered \u2192 downstream consumers break silently  </li> <li>Delivery guarantee assumed, but never validated in test</li> </ul>"},{"location":"categories/async/event-retry-delay/#stronger-event-flow-design","title":"\u2705 Stronger Event Flow Design","text":"<ul> <li>Define max retry windows and dead-letter paths  </li> <li>Design for retry \u201cechoes\u201d: side effects should be idempotent  </li> <li>Use correlation IDs to trace event chains  </li> <li>Monitor queue latency separately from success/error metrics  </li> <li>Document SLA for delay-tolerant vs delay-critical events</li> </ul>"},{"location":"categories/async/event-retry-delay/#core-principle","title":"\u26a0\ufe0f Core Principle","text":"<p>Async systems don\u2019t fail loud. They fail later and invisibly\u2014unless you design them not to.</p>"},{"location":"categories/async/event-retry-delay/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t retry always better than fail? A: Only if the retry is harmless.</p> </li> <li> <p>Q: How do we know which events are sensitive to delay? A: Define UX expectations first. Then encode that into the pipeline.</p> </li> </ul>"},{"location":"categories/async/event-retry-delay/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Async-side effect safety  </li> <li>[ ] Event delivery observability  </li> <li>[ ] SLA-aware event design  </li> </ul>"},{"location":"categories/async/external-failure-impact/","title":"What Happens When the External System Fails?","text":"<p>Type: Structure Category: Async Audience: Engineers integrating with third-party systems, APIs, or partner platforms</p>"},{"location":"categories/async/external-failure-impact/#what-this-perspective-asks","title":"\ud83e\udde0 What This Perspective Asks","text":"<ul> <li>What exactly happens if an external system goes down?</li> <li>Is the failure detected, logged, and degraded gracefully?</li> <li>Who gets hurt\u2014and how much?</li> </ul>"},{"location":"categories/async/external-failure-impact/#common-failures","title":"\ud83d\udea8 Common Failures","text":"<ul> <li>Partner API goes down \u2192 internal queues fill silently  </li> <li>Retry storms \u2192 overload own systems  </li> <li>UX degrades (empty dashboards, broken buttons) with no user messaging  </li> <li>Errors silently swallowed because \u201casync = eventually\u201d</li> </ul>"},{"location":"categories/async/external-failure-impact/#better-failure-handling","title":"\u2705 Better Failure Handling","text":"<ul> <li>Explicit fallbacks or UI states when partner APIs fail  </li> <li>Timeout and retry policies per integration\u2014not global  </li> <li>Queue isolation for high-risk dependencies  </li> <li>Alert on external system latency/spike\u2014not just failure  </li> <li>Document UX impact and expected behavior per integration</li> </ul>"},{"location":"categories/async/external-failure-impact/#core-principle","title":"\u26a0\ufe0f Core Principle","text":"<p>Async doesn\u2019t mean ignore the failure. It means control how the failure manifests.</p>"},{"location":"categories/async/external-failure-impact/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: We have retries. Isn\u2019t that enough? A: Not if the user or system can\u2019t tell what happened.</p> </li> <li> <p>Q: Should we surface all integration failures? A: No. But you should choose who needs to know what\u2014and when.</p> </li> </ul>"},{"location":"categories/async/external-failure-impact/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Third-party dependency fallback  </li> <li>[ ] Async error surface design  </li> <li>[ ] Queue and retry containment  </li> </ul>"},{"location":"categories/async/sync-async-alignment/","title":"Is the Sync/Async Split Intentional\u2014or Just Incidental?","text":"<p>Type: Structure Category: Async Audience: Engineers deciding API boundaries, workflow orchestration, or event-driven transitions</p>"},{"location":"categories/async/sync-async-alignment/#what-this-design-perspective-really-asks","title":"\ud83e\udde0 What This Design Perspective Really Asks","text":"<p>Not \u201cis it async?\u201d But:</p> <ul> <li>Is async the right model for this business moment?  </li> <li>Does async create ambiguity in user expectations or system contracts?</li> </ul>"},{"location":"categories/async/sync-async-alignment/#poorly-aligned-syncasync-patterns","title":"\ud83d\udea8 Poorly Aligned Sync/Async Patterns","text":"<ul> <li>Long-running sync API \u2192 user waits \u2192 timeout \u2192 duplicate retries  </li> <li>Async job triggers UI update, but UX doesn't reflect delay  </li> <li>Side effects (emails, downstream updates) happen outside the transaction  </li> <li>Inconsistent status handling \u2192 \u201cdid it succeed or not?\u201d</li> </ul>"},{"location":"categories/async/sync-async-alignment/#better-alignment-practices","title":"\u2705 Better Alignment Practices","text":"<ul> <li>Sync: only when user needs immediate confirmation or result  </li> <li>Async: when work is delegated, deterministic, and retriable </li> <li>Return status handles that reflect \u201cin progress\u201d vs \u201cdone\u201d  </li> <li>Surface async state visibly to users\u2014not just in logs  </li> <li>Timeouts and retries with idempotency guards</li> </ul>"},{"location":"categories/async/sync-async-alignment/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Async \u2260 later. Async = a different kind of contract\u2014one you must make explicit.</p>"},{"location":"categories/async/sync-async-alignment/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can't we just go async to improve perf? A: Yes\u2014if you also redesign user expectations.</p> </li> <li> <p>Q: Should async jobs always notify completion? A: If the user or system needs to act on the result, yes.</p> </li> </ul>"},{"location":"categories/async/sync-async-alignment/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] UX-aware async design  </li> <li>[ ] Async result reconciliation  </li> <li>[ ] Transactional boundaries in event workflows  </li> </ul>"},{"location":"categories/availability/backup-strategy/","title":"Is the Backup Strategy Well-Defined and Comprehensive?","text":"<p>Type: DeepDive Category: Availability Audience: SREs, data engineers, system owners responsible for recovery readiness</p>"},{"location":"categories/availability/backup-strategy/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Having a backup is not the same as having a reliable, restorable backup.</p> <p>This perspective checks whether the backup plan is clearly defined, covering all critical system states\u2014not just the database.</p>"},{"location":"categories/availability/backup-strategy/#what-should-be-backed-up","title":"\ud83d\udd0d What Should Be Backed Up?","text":"<ul> <li>Application DB: RDS, CloudSQL, etc.  </li> <li>Blob storage: S3, GCS, user uploads  </li> <li>Message queues and in-flight events  </li> <li>Secrets and configuration state  </li> <li>Infrastructure-as-code (Terraform, Helm, etc.)  </li> <li>Audit logs and billing data</li> </ul>"},{"location":"categories/availability/backup-strategy/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Only DB is backed up \u2192 app state, blobs, configs lost  </li> <li>Snapshots are scheduled but never tested  </li> <li>Encrypted backups without stored keys  </li> <li>Retention policy too short for real incident investigations  </li> <li>Backups stored in same region as production</li> </ul>"},{"location":"categories/availability/backup-strategy/#smarter-backup-design","title":"\u2705 Smarter Backup Design","text":"<ul> <li>List backup scope by component: what, when, how, where  </li> <li>Set retention periods by legal, business, and recovery needs  </li> <li>Store backups cross-region and secure (access-controlled, encrypted)  </li> <li>Define access recovery procedure: who can restore what  </li> <li>Monitor backup job success and validate integrity regularly</li> </ul>"},{"location":"categories/availability/backup-strategy/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Backups are promises. A broken promise at recovery time is a system failure.</p>"},{"location":"categories/availability/backup-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t snapshotting enough? A: Snapshots are one layer. You need multiple layers, verified.</p> </li> <li> <p>Q: How do we know if our backup is working? A: Restore it. Periodically. Under real failure conditions.</p> </li> </ul>"},{"location":"categories/availability/backup-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Recovery playbook validation  </li> <li>[ ] Cross-region failure scenarios  </li> <li>[ ] Restore access control and auditing  </li> <li>[ ] Legal and audit trace preservation</li> </ul>"},{"location":"categories/availability/data-recovery-plan/","title":"Is a Data Recovery Plan Considered for Failure Scenarios?","text":"<p>Type: DeepDive Category: Availability Audience: SREs, backend engineers, data platform owners managing fault recovery</p>"},{"location":"categories/availability/data-recovery-plan/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Backups are not recovery. What matters is whether you can bring the system back to a safe and consistent state\u2014under pressure.</p> <p>This perspective examines whether data-level restoration plans are explicitly designed and aligned with real-world failure cases.</p>"},{"location":"categories/availability/data-recovery-plan/#recovery-scenarios","title":"\ud83d\udd0d Recovery Scenarios","text":"<ul> <li>Point-in-time restore from WAL or snapshots  </li> <li>Recovery of specific tenant data without full rollback  </li> <li>Rehydrating indexes or caches from persisted storage  </li> <li>Rolling back incomplete transactional writes  </li> <li>Rerunning external sync with idempotency handling</li> </ul>"},{"location":"categories/availability/data-recovery-plan/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Backups exist but recovery steps are undocumented  </li> <li>Full restore is possible but takes hours\u2014no SLA defined  </li> <li>Only infra is recovered; business logic state is broken  </li> <li>Restore causes duplicate records or version conflict  </li> <li>RTO/RPO is undefined, untested, or unrealistic</li> </ul>"},{"location":"categories/availability/data-recovery-plan/#smarter-recovery-strategy","title":"\u2705 Smarter Recovery Strategy","text":"<ul> <li>Document exact restore procedures per failure class  </li> <li>Automate restore playbooks for high-risk systems  </li> <li>Align RTO (recovery time) and RPO (recovery point) with SLA  </li> <li>Test restore on a regular cadence\u2014under realistic failure modes  </li> <li>Include non-DB state (logs, blobs, async queue state) in recovery scope</li> </ul>"},{"location":"categories/availability/data-recovery-plan/#principle","title":"\u26a0\ufe0f Principle","text":"<p>You didn\u2019t \u201crecover\u201d if you came back broken. Recovery means: consistent, complete, and usable.</p>"},{"location":"categories/availability/data-recovery-plan/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t backup enough? A: No. Backup is storage. Recovery is reassembly under pressure.</p> </li> <li> <p>Q: How often should we test recovery? A: For critical paths: quarterly. For infra-wide: at least twice a year.</p> </li> </ul>"},{"location":"categories/availability/data-recovery-plan/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Backup integrity testing  </li> <li>[ ] Event replay and idempotency logic  </li> <li>[ ] Partial restore for multi-tenant architecture  </li> <li>[ ] Disaster simulation planning</li> </ul>"},{"location":"categories/availability/failover-design/","title":"Is a Failover Strategy in Place for Critical Operations?","text":"<p>Type: DeepDive Category: Availability Audience: Infra engineers, SREs, platform leads managing availability and redundancy</p>"},{"location":"categories/availability/failover-design/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>No system is immune to failure.</p> <p>This perspective verifies whether your most critical processing paths can survive machine failure, zone failure, or sudden disconnects\u2014without human intervention.</p>"},{"location":"categories/availability/failover-design/#critical-examples","title":"\ud83d\udd0d Critical Examples","text":"<ul> <li>Background tasks move to a healthy worker if one dies  </li> <li>API gateway can reroute across availability zones  </li> <li>DB read replicas are promoted on primary failure  </li> <li>Leader election recovers quorum-based consensus  </li> <li>External dependency is wrapped with circuit breakers and fallback paths</li> </ul>"},{"location":"categories/availability/failover-design/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Failover is \u201cplanned\u201d but never tested  </li> <li>Infra auto-recovers, but app logic is not restart-tolerant  </li> <li>Stateful nodes fail without handover of critical context  </li> <li>Observability gaps during failover \u2192 unclear if recovery succeeded</li> </ul>"},{"location":"categories/availability/failover-design/#smarter-failover-design","title":"\u2705 Smarter Failover Design","text":"<ul> <li>Classify \u201ccritical to user experience\u201d vs. \u201cnon-critical background\u201d  </li> <li>Simulate infrastructure chaos regularly\u2014not just unit tests  </li> <li>Use health checks and probes to drive failover triggers  </li> <li>Ensure handoff design preserves state or tolerates partial loss  </li> <li>Log and alert failover triggers and results clearly</li> </ul>"},{"location":"categories/availability/failover-design/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Failover is not a feature. It\u2019s a testable architectural constraint.</p>"},{"location":"categories/availability/failover-design/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Is infra-level HA (like multi-AZ) enough? A: No. Apps need to be designed to survive unexpected restart and failover.</p> </li> <li> <p>Q: What does \u201csimulate chaos\u201d mean? A: Kill nodes. Disconnect network. Monitor outcomes.</p> </li> </ul>"},{"location":"categories/availability/failover-design/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Leader election design  </li> <li>[ ] Retry suppression after failover  </li> <li>[ ] State preservation or reconciliation logic  </li> <li>[ ] Alerting on degraded state vs. full recovery</li> </ul>"},{"location":"categories/common/design-justification/","title":"Do You Know Why This Design Exists?","text":"<p>Type: Structure Category: Common Audience: Reviewer / Lead Architect / Any Engineer Who Has Ever Said \u201cIt Works, I Guess\u201d</p>"},{"location":"categories/common/design-justification/#this-isnt-about-best-practices","title":"\ud83e\udded This Isn\u2019t About Best Practices","text":"<p>Every system is a graveyard of decisions. What worked once may break tomorrow\u2014and what breaks may never be blamed on the real cause.</p> <p>This isn\u2019t a checklist item. It\u2019s a survival instinct.</p>"},{"location":"categories/common/design-justification/#what-were-really-asking","title":"\ud83d\udd0d What We\u2019re Really Asking","text":"<ul> <li>Why this approach, and not the others?  </li> <li>What trade-offs did you consciously accept?  </li> <li>If someone replaces this tomorrow, will they know what not to break?</li> </ul>"},{"location":"categories/common/design-justification/#patterns-that-save-you-later","title":"\ud83e\udde0 Patterns That Save You Later","text":"<ul> <li>You wrote: \u201cThis design minimizes write amplification at the cost of occasional staleness.\u201d   \u2192 That one sentence just saved someone 3 days of debugging.</li> <li>You noted the alternative: \u201cWe didn\u2019t go with Option B due to memory constraints in multi-tenant scaling.\u201d   \u2192 That tells ops, PM, and future-you something valuable.</li> </ul>"},{"location":"categories/common/design-justification/#when-its-missing","title":"\ud83e\udde8 When It\u2019s Missing","text":"<ul> <li>Design becomes cargo culted. No one knows why it exists, so no one knows when it can die.  </li> <li>Reviewers can\u2019t give meaningful feedback. There\u2019s no context to push against.  </li> <li>The system survives\u2014but its reasons rot away.</li> </ul>"},{"location":"categories/common/design-justification/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t this just documentation? A: No. Documentation explains what. This explains why. Different species.</p> </li> <li> <p>Q: Can\u2019t people figure it out from code? A: Not when they\u2019re stressed. Or new. Or not you.</p> </li> </ul>"},{"location":"categories/common/design-justification/#related-perspectives","title":"\ud83e\udea7 Related Perspectives","text":"<ul> <li>[ ] Trade-off visibility  </li> <li>[ ] Architecture decision records (ADR)  </li> <li>[ ] Review hygiene and design clarity</li> </ul>"},{"location":"categories/data/distributed-transaction-design/","title":"Have You Deliberately Decided Whether You Need Distributed Transactions?","text":"<p>Type: DeepDive Category: Data Audience: Engineers dealing with microservices, cross-DB workflows, or async state</p>"},{"location":"categories/data/distributed-transaction-design/#first-the-meta-question","title":"\ud83e\udde0 First, the Meta-Question","text":"<p>Distributed transactions aren\u2019t always needed. But they always need to be considered.</p> <p>If you skipped the question, you\u2019ve made a decision\u2014just not consciously.</p>"},{"location":"categories/data/distributed-transaction-design/#whats-actually-being-asked","title":"\u26a0\ufe0f What\u2019s Actually Being Asked","text":"<ul> <li>Will the system be OK if two updates succeed, and the third fails?  </li> <li>Is eventual consistency acceptable here?  </li> <li>Who detects and repairs drifted state?</li> <li>What\u2019s the user experience in partial success cases?</li> </ul>"},{"location":"categories/data/distributed-transaction-design/#when-it-goes-wrong","title":"\ud83d\udea8 When It Goes Wrong","text":"<ul> <li>Partial updates that look fine\u2026 until a user clicks \u201cexport\u201d  </li> <li>Async retries that reapply incomplete state  </li> <li>Background jobs cleaning up state that was never finalized  </li> <li>System tests that don\u2019t simulate failure modes</li> </ul>"},{"location":"categories/data/distributed-transaction-design/#healthier-patterns","title":"\u2705 Healthier Patterns","text":"<ul> <li>Explicit modeling of consistency boundaries </li> <li>Choose per-case: local txn / saga / outbox / retry-compensate  </li> <li>Store enough metadata to debug failure reconstruction  </li> <li>Document what it means for consistency to \u201ceventually\u201d happen</li> </ul>"},{"location":"categories/data/distributed-transaction-design/#core-philosophy","title":"\ud83e\udde0 Core Philosophy","text":"<p>You\u2019re not designing for \u201cno failures.\u201d You\u2019re designing for who pays the cost of failure\u2014and when.</p>"},{"location":"categories/data/distributed-transaction-design/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t this infra stuff? A: Only if your domain doesn\u2019t care about truth.</p> </li> <li> <p>Q: But we don\u2019t need 2PC, right? A: Probably not. But have you designed around its absence?</p> </li> </ul>"},{"location":"categories/data/distributed-transaction-design/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Failure-aware service boundaries  </li> <li>[ ] Consistency contracts between systems  </li> <li>[ ] Recovery-aware data modeling  </li> </ul>"},{"location":"categories/data/fallback-strategy/","title":"Do You Have a Fallback Plan for Asynchronous Failures?","text":"<p>Type: DeepDive Category: Data Audience: Engineers designing event pipelines, retries, and error handling</p>"},{"location":"categories/data/fallback-strategy/#what-this-is-actually-about","title":"\ud83e\udde0 What This Is Actually About","text":"<p>Async failures aren\u2019t rare. They\u2019re just delayed.</p> <p>So the question is:</p> <ul> <li>What happens when retries fail?</li> <li>What if downstream data is already inconsistent?</li> <li>How do you stop cascading retries from compounding failure?</li> </ul>"},{"location":"categories/data/fallback-strategy/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Retry loops that cause double-inserts  </li> <li>No dead letter queue\u2014just silent drops  </li> <li>Inconsistent intermediate states during retries  </li> <li>Failures that reprocess already-corrected data</li> </ul>"},{"location":"categories/data/fallback-strategy/#good-fallback-strategies","title":"\u2705 Good Fallback Strategies","text":"<ul> <li>Dead-letter queues with alerting and visibility  </li> <li>State versioning or timestamps to detect reprocessing conflicts  </li> <li>Explicit deduplication checks on mutation events  </li> <li>Manual override or quarantine paths for human repair</li> </ul>"},{"location":"categories/data/fallback-strategy/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Your system should fail visibly, not repeatedly.</p> <p>And when it fails\u2014 it should do so in a way that helps you recover meaningfully.</p>"},{"location":"categories/data/fallback-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just retry until it works? A: What if it never does?</p> </li> <li> <p>Q: Should fallback always mean human involvement? A: No\u2014but someone should know it happened.</p> </li> </ul>"},{"location":"categories/data/fallback-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Retry control and backoff strategies  </li> <li>[ ] Observability in async workflows  </li> <li>[ ] Recovery paths for non-idempotent events  </li> </ul>"},{"location":"categories/data/index-design/","title":"Is Your Index Designed\u2014or Just Added After It Got Slow?","text":"<p>Type: Structure Category: Data Audience: Engineers who added an index last week and forgot why</p>"},{"location":"categories/data/index-design/#the-real-question","title":"\ud83c\udfaf The Real Question","text":"<p>Is your index structure proactively shaped by read intent\u2014or is it just a patch?</p> <p>If your answer is \u201cwe\u2019ll monitor and add indexes later,\u201d you\u2019re already behind.</p>"},{"location":"categories/data/index-design/#common-index-design-failures","title":"\ud83d\udea8 Common Index Design Failures","text":"<ul> <li>Over-indexing \u2192 writes slow down, SSD cries  </li> <li>Under-indexing \u2192 filters applied in memory, not in scan  </li> <li>Wrong order \u2192 index exists but isn\u2019t used  </li> <li>No compound index where one is needed  </li> <li>Index for one feature breaks another query</li> </ul>"},{"location":"categories/data/index-design/#good-index-design-happens-when","title":"\u2705 Good Index Design Happens When\u2026","text":"<ul> <li>You start from access patterns, not just schema  </li> <li>Read paths are traced from UI \u2192 API \u2192 DB  </li> <li>You think in terms of \u201cwhat question are we answering\u201d  </li> <li>You challenge: \u201cDo we need this query fast at all?\u201d</li> </ul>"},{"location":"categories/data/index-design/#litmus-tests","title":"\ud83d\udd0d Litmus Tests","text":"<ul> <li>Can you name the top 3 queries this index serves?  </li> <li>Do you know which indexes are hurting insert/update performance?</li> </ul>"},{"location":"categories/data/index-design/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t this DB admin work? A: Only if your schema is read-only.</p> </li> <li> <p>Q: Can\u2019t we just rely on the query planner? A: The planner optimizes. It doesn\u2019t prioritize.</p> </li> </ul>"},{"location":"categories/data/index-design/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Read path traceability  </li> <li>[ ] Query performance vs write latency trade-offs  </li> <li>[ ] Index lifecycle awareness  </li> </ul>"},{"location":"categories/data/indexing-strategy/","title":"Is Your Index Strategy Designed\u2014Or Just Inherited?","text":"<p>Type: Structure Category: Data Audience: Backend engineers who haven\u2019t looked at <code>EXPLAIN</code> in months</p>"},{"location":"categories/data/indexing-strategy/#why-this-isnt-just-a-database-problem","title":"\ud83e\udde0 Why This Isn\u2019t Just a Database Problem","text":"<p>Indexes shape the access patterns of your entire system. They\u2019re not infra. They\u2019re interface.</p>"},{"location":"categories/data/indexing-strategy/#what-goes-wrong","title":"\ud83d\udea8 What Goes Wrong","text":"<ul> <li>Indexes exist for writes that never get queried  </li> <li>Queries rely on fields without indexes \u2192 performance death spiral  </li> <li>Composite indexes exist... but the field order is wrong  </li> <li>Nobody knows which queries matter, so everything is \u201ckind of slow\u201d</li> </ul>"},{"location":"categories/data/indexing-strategy/#good-index-design-practices","title":"\u2705 Good Index Design Practices","text":"<ul> <li>Define hot paths\u2014core queries that must stay fast  </li> <li>Validate indexes against real query plans (<code>EXPLAIN</code>, <code>analyze</code>)  </li> <li>Design composite indexes in query usage order </li> <li>Revisit indexes after schema changes\u2014not just at crisis time</li> </ul>"},{"location":"categories/data/indexing-strategy/#litmus-tests","title":"\ud83d\udd0d Litmus Tests","text":"<ul> <li>Can you name the top 3 most performance-critical queries in your system?  </li> <li>Do those queries align with current indexes?  </li> <li>When did someone last prune unused indexes?</li> </ul>"},{"location":"categories/data/indexing-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t this for the DBA to handle? A: Not if your schema is your product. You own what you ship.</p> </li> <li> <p>Q: Should we index every field just in case? A: That\u2019s not safety. That\u2019s entropy.</p> </li> </ul>"},{"location":"categories/data/indexing-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Access pattern-driven schema  </li> <li>[ ] Hot path identification  </li> <li>[ ] Post-migration index validation  </li> </ul>"},{"location":"categories/data/lifecycle-clarity/","title":"Is the Lifecycle of Your Data Clear\u2014Or Just Assumed?","text":"<p>Type: Structure Category: Data Audience: Anyone designing entities that \"just exist\" forever</p>"},{"location":"categories/data/lifecycle-clarity/#the-core-question","title":"\ud83e\udde0 The Core Question","text":"<p>Can you answer this about every major entity in your system?</p> <ul> <li>When is it created?</li> <li>How is it updated?</li> <li>When is it deleted?</li> <li>And what shouldn\u2019t happen?</li> </ul> <p>If you can\u2019t, neither can your code\u2014or your teammates.</p>"},{"location":"categories/data/lifecycle-clarity/#why-this-matters","title":"\ud83d\udea8 Why This Matters","text":"<ul> <li>Unclear lifecycle leads to zombie data and haunted features  </li> <li>Soft delete vs hard delete becomes political  </li> <li>Business rules get reimplemented inconsistently  </li> <li>Schema evolves, but meaning decays</li> </ul>"},{"location":"categories/data/lifecycle-clarity/#good-practices","title":"\u2705 Good Practices","text":"<ul> <li>Use domain language like <code>archive()</code>, <code>deprecate()</code>, <code>revive()</code>\u2014not just <code>is_active = false</code> </li> <li>Keep deleted or historical data access intentional </li> <li>Make edge states (e.g., expired, orphaned, abandoned) modelable and testable </li> <li>Document life events as part of the entity spec\u2014not just as code behavior</li> </ul>"},{"location":"categories/data/lifecycle-clarity/#litmus-tests","title":"\ud83d\udd0d Litmus Tests","text":"<ul> <li>Does anyone know when it's safe to delete this object?  </li> <li>Can the UI reflect its lifecycle state clearly and meaningfully?</li> </ul>"},{"location":"categories/data/lifecycle-clarity/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just soft-delete and filter by default? A: That\u2019s not a lifecycle. That\u2019s a filter with memory loss.</p> </li> <li> <p>Q: Who owns lifecycle decisions\u2014product or backend? A: Both. One owns intent. The other enforces it.</p> </li> </ul>"},{"location":"categories/data/lifecycle-clarity/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Domain events for lifecycle transitions  </li> <li>[ ] Schema design for temporal states  </li> <li>[ ] Record lifecycle awareness in API design  </li> </ul>"},{"location":"categories/data/migration-impact/","title":"Is Schema Migration Treated as a Design Phase\u2014or Just a Release Task?","text":"<p>Type: Structure Category: Data Audience: Backend engineers who \u201cjust add a column real quick\u201d</p>"},{"location":"categories/data/migration-impact/#whats-actually-being-asked","title":"\ud83e\udde0 What\u2019s Actually Being Asked","text":"<p>Not \u201cwill it work.\u201d</p> <p>But:</p> <ul> <li>Will it silently break something?</li> <li>Will it disrupt downstream jobs?</li> <li>Will it leave inconsistent rows if interrupted?</li> </ul> <p>Schema change is not a git commit. It\u2019s a multi-actor system event\u2014with failure modes.</p>"},{"location":"categories/data/migration-impact/#what-goes-wrong","title":"\ud83d\udea8 What Goes Wrong","text":"<ul> <li>Adding NOT NULL fields without defaults  </li> <li>Dropping columns used by legacy ETLs  </li> <li>Index rebuilds triggering downtime  </li> <li>Migrating while background jobs are still running  </li> <li>Test data masks the fact that prod is huge</li> </ul>"},{"location":"categories/data/migration-impact/#healthy-migration-design-includes","title":"\u2705 Healthy Migration Design Includes:","text":"<ul> <li>Simulation on prod-size data  </li> <li>Clear rollback plan for partial state  </li> <li>Notifications for systems affected by schema contracts  </li> <li>Observability before, during, and after deploy  </li> <li>Deployment strategy that decouples schema from feature switches</li> </ul>"},{"location":"categories/data/migration-impact/#design-mindset","title":"\u26a0\ufe0f Design Mindset","text":"<p>A migration is a durable mutation of shared reality. That\u2019s not deployment. That\u2019s surgery.</p>"},{"location":"categories/data/migration-impact/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: It\u2019s just a column. Why so serious? A: Because the column isn\u2019t alone. It has integrations, assumptions, and costs.</p> </li> <li> <p>Q: Isn\u2019t this handled by ORM tools? A: ORMs write SQL. They don\u2019t design consequences.</p> </li> </ul>"},{"location":"categories/data/migration-impact/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Deployment strategy for shared state  </li> <li>[ ] Rollback-aware schema evolution  </li> <li>[ ] Observability of schema-level changes  </li> </ul>"},{"location":"categories/data/normalization-balance/","title":"Is Your Schema Over-Normalized\u2014or Just Not Thinking About It?","text":"<p>Type: Structure Category: Data Audience: Engineers who haven't asked \u201cwhat's the query cost of this join?\u201d</p>"},{"location":"categories/data/normalization-balance/#this-isnt-about-rules-its-about-tradeoffs","title":"\u2696\ufe0f This Isn\u2019t About Rules. It\u2019s About Tradeoffs.","text":"<p>Normalization isn\u2019t \u201ccorrect.\u201d Denormalization isn\u2019t \u201cfast.\u201d</p> <p>They\u2019re both tools\u2014and every tool leaves scars.</p>"},{"location":"categories/data/normalization-balance/#common-failure-modes","title":"\ud83d\udea8 Common Failure Modes","text":"<ul> <li>Over-normalized schema causes N+1 joins or multi-hop fetches  </li> <li>Denormalized tables drift out of sync  </li> <li>Analytics pipelines require rehydration of flattened data  </li> <li>Small updates touch many rows due to duplication</li> </ul>"},{"location":"categories/data/normalization-balance/#healthy-balance-looks-like","title":"\u2705 Healthy Balance Looks Like:","text":"<ul> <li>Normalize for source-of-truth and update frequency  </li> <li>Denormalize for read paths\u2014when latency matters more than purity </li> <li>Use materialized views or cache layers with intentional ownership </li> <li>Keep the duplication cost visible\u2014don\u2019t hide it in helper functions</li> </ul>"},{"location":"categories/data/normalization-balance/#key-design-framing","title":"\ud83e\udde0 Key Design Framing","text":"<p>Every duplication is a sync contract. Every join is a latency tax. You choose your poison\u2014but own the symptoms.</p>"},{"location":"categories/data/normalization-balance/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Should we always denormalize for performance? A: No. But don\u2019t pretend joins are free.</p> </li> <li> <p>Q: What if we need both forms? A: Then define the boundary\u2014and who owns keeping them in sync.</p> </li> </ul>"},{"location":"categories/data/normalization-balance/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Schema-as-interface thinking  </li> <li>[ ] Read vs write path divergence  </li> <li>[ ] Data redundancy and synchronization risk  </li> </ul>"},{"location":"categories/data/retry-consistency/","title":"Can Retried Events Introduce Inconsistent State?","text":"<p>Type: DeepDive Category: Data Audience: Engineers working on async pipelines, retries, and eventual consistency</p>"},{"location":"categories/data/retry-consistency/#the-silent-disaster","title":"\ud83d\udea8 The Silent Disaster","text":"<p>Retries feel safe\u2014until they aren\u2019t.</p> <ul> <li>A retry re-applies the same state change \u2192 duplicate mutation</li> <li>A side effect (email, payment) gets triggered again \u2192 user chaos</li> <li>A compensating action runs twice \u2192 data corruption</li> </ul>"},{"location":"categories/data/retry-consistency/#the-real-question","title":"\ud83e\udde0 The Real Question","text":"<p>When your event fires again\u2014 are you confident it won\u2019t do something wrong?</p> <p>Or are you just hoping the system \u201cshould handle it\u201d?</p>"},{"location":"categories/data/retry-consistency/#scenarios-to-review","title":"\ud83d\udd0d Scenarios to Review","text":"<ul> <li>Idempotency: enforced where? request layer? domain? DB?</li> <li>Event replays: do they mutate state again, or just confirm idempotence?</li> <li>Side effects: are they guarded by delivery guarantees, or just \u201cprobably won\u2019t happen twice\u201d?</li> </ul>"},{"location":"categories/data/retry-consistency/#safer-designs","title":"\u2705 Safer Designs","text":"<ul> <li>Use idempotency keys at system boundaries  </li> <li>Store event execution history to detect duplicates  </li> <li>Make side effects part of transactional outbox, not best-effort fire-and-forget  </li> <li>Prefer \"confirm success\" over \"assume failure and retry\"</li> </ul>"},{"location":"categories/data/retry-consistency/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Aren\u2019t retries necessary for reliability? A: Yes. But reliability without state integrity is just faster failure.</p> </li> <li> <p>Q: What if retries are part of the domain logic? A: Then encode them explicitly. Don\u2019t hide them behind infra.</p> </li> </ul>"},{"location":"categories/data/retry-consistency/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Idempotency design patterns  </li> <li>[ ] Event replay safety  </li> <li>[ ] State mutation and retry coupling  </li> </ul>"},{"location":"categories/data/write-contention/","title":"Is Write Contention Avoided\u2014or Just Left to Luck?","text":"<p>Type: Structure Category: Data Audience: Engineers who think locking is something the database just \u201chandles\u201d</p>"},{"location":"categories/data/write-contention/#the-problem-isnt-just-race-conditions","title":"\ud83e\udde0 The Problem Isn't Just Race Conditions","text":"<p>It\u2019s what race conditions do to your users:</p> <ul> <li>Lost updates  </li> <li>Deadlocks under load  </li> <li>Feature toggles that \u201csometimes don\u2019t work\u201d  </li> <li>Exploding retry queues and invisible data corruption</li> </ul>"},{"location":"categories/data/write-contention/#common-anti-patterns","title":"\ud83d\udd0d Common Anti-Patterns","text":"<ul> <li>No retry logic on writes  </li> <li>App logic assumes atomic multi-row updates  </li> <li>Transactions span multiple services or queues  </li> <li>Optimistic locking without conflict resolution  </li> <li>Global mutexes that serialize everything</li> </ul>"},{"location":"categories/data/write-contention/#better-strategies","title":"\u2705 Better Strategies","text":"<ul> <li>Use row-level locking where feasible  </li> <li>Keep transactions short and targeted  </li> <li>Use optimistic concurrency with user-aware conflict handling  </li> <li>Consider domain-level serialization (per document, per task) instead of global mutexes</li> </ul>"},{"location":"categories/data/write-contention/#core-design-tradeoff","title":"\u2696\ufe0f Core Design Tradeoff","text":"<p>You\u2019re always trading off:</p> <ul> <li>Throughput  </li> <li>Isolation  </li> <li>User experience under failure</li> </ul> <p>Designers who pretend otherwise are just borrowing time\u2014from ops, and from users.</p>"},{"location":"categories/data/write-contention/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just \u201cretry on error\u201d? A: If you mean \u201cretry the same mistake forever,\u201d sure.</p> </li> <li> <p>Q: Shouldn\u2019t the DB handle all of this? A: Databases enforce. You design.</p> </li> </ul>"},{"location":"categories/data/write-contention/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Isolation level strategies  </li> <li>[ ] Retry semantics in async flows  </li> <li>[ ] Preventing silent overwrite of writes  </li> </ul>"},{"location":"categories/domain/domain-permissions/","title":"Is Authorization Modeled as Domain Behavior\u2014or Just Filtered in the UI?","text":"<p>Type: Structure Category: Domain Audience: Engineers who think \"access control\" is an API thing</p>"},{"location":"categories/domain/domain-permissions/#why-this-exists","title":"\ud83d\udea8 Why This Exists","text":"<p>Authorization is a business rule. If your domain model can\u2019t answer \u201cCan this user do this?\u201d, then it\u2019s not protecting the system\u2014it\u2019s outsourcing it.</p>"},{"location":"categories/domain/domain-permissions/#symptoms-of-a-missing-model","title":"\ud83d\udd0d Symptoms of a Missing Model","text":"<ul> <li>UI hides actions, but API still allows them  </li> <li>Authorization checks scattered across controllers  </li> <li><code>canEdit</code> logic duplicated across multiple services  </li> <li>No clear source of truth for permission rules</li> </ul>"},{"location":"categories/domain/domain-permissions/#what-good-looks-like","title":"\u2705 What Good Looks Like","text":"<ul> <li>Domain exposes behaviors like <code>document.canBeApprovedBy(user)</code> </li> <li>Application layer enforces via <code>requirePermission(user, Action.EDIT_DOCUMENT)</code> </li> <li>Permission structure is visible, testable, and tied to business intent  </li> <li>Authorization decisions are made early\u2014not after the response is built</li> </ul>"},{"location":"categories/domain/domain-permissions/#design-principle","title":"\ud83e\udde0 Design Principle","text":"<p>Permission is not about hiding buttons. It\u2019s about controlling access to business consequences.</p>"},{"location":"categories/domain/domain-permissions/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Should permission live in the domain? A: If it\u2019s about what\u2019s allowed based on business context, yes.</p> </li> <li> <p>Q: Isn\u2019t that duplicated with app-layer guards? A: Not if they speak the same policy, in different layers.</p> </li> </ul>"},{"location":"categories/domain/domain-permissions/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Responsibility split: domain vs application  </li> <li>[ ] Policy-based permission models  </li> <li>[ ] Deny-by-default philosophy  </li> </ul>"},{"location":"categories/domain/domain-separation/","title":"Is the Domain Separated from the Application Layer\u2014and Does It Mean Anything?","text":"<p>Type: Structure Category: Domain Audience: Engineers pretending they\u2019re writing \u201cbusiness logic\u201d</p>"},{"location":"categories/domain/domain-separation/#whats-actually-being-asked-here","title":"\ud83d\udccc What\u2019s Actually Being Asked Here","text":"<p>You\u2019ve drawn a clean architecture diagram. Cool. Now answer this:</p> <ul> <li>Can the domain say \u201cno\u201d to the application?</li> <li>Can it reject invalid state transitions?</li> <li>Or is it just holding data and praying someone else checks it?</li> </ul>"},{"location":"categories/domain/domain-separation/#what-proper-separation-actually-enables","title":"\ud83e\udde0 What Proper Separation Actually Enables","text":"<ul> <li>Your business rules live in the domain, not scattered across services or controllers  </li> <li>Application orchestration becomes thin\u2014and safer  </li> <li>Test coverage hits behavior, not just I/O mocks  </li> <li>You can change the app layer without corrupting the model</li> </ul>"},{"location":"categories/domain/domain-separation/#patterns-that-pretend-to-be-separation-but-arent","title":"\ud83d\udea8 Patterns That Pretend to Be Separation (But Aren\u2019t)","text":"<ul> <li>Dumb domain models: <code>{ User(name: String, isAdmin: Boolean) }</code> \u2192 That\u2019s a DTO wearing a mustache  </li> <li>Application layer calling <code>domain.validate()</code> \u2192 Then ignoring the result  </li> <li>Behavior checks in service classes \u2192 AKA: \u201cjust one more if-statement\u201d until entropy takes over</li> </ul>"},{"location":"categories/domain/domain-separation/#litmus-tests","title":"\ud83d\udd0d Litmus Tests","text":"<ul> <li>Can you create an invalid object via constructor or factory?   \u2192 If yes, your domain is a data bag, not a rulekeeper.  </li> <li>Is state transition explicit (<code>start()</code>, <code>cancel()</code>, <code>expire()</code>)?   \u2192 Or is it <code>status = 3</code> and vibes?</li> </ul>"},{"location":"categories/domain/domain-separation/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: But isn\u2019t that too much logic in the domain? A: It\u2019s only \u201ctoo much\u201d if you confuse \u201crules\u201d with \u201crouting.\u201d</p> </li> <li> <p>Q: Shouldn\u2019t use cases control all flows? A: They should orchestrate. But orchestration \u2260 judgment.</p> </li> </ul>"},{"location":"categories/domain/domain-separation/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Domain responsibility boundaries  </li> <li>[ ] State transition modeling  </li> <li>[ ] Behavior-driven validation  </li> </ul>"},{"location":"categories/domain/domain-validation/","title":"Is Your Validation Actually Enforced\u2014or Just Wished For?","text":"<p>Type: Structure Category: Domain Audience: Engineers who say \u201cyeah, we validate it... somewhere\u201d</p>"},{"location":"categories/domain/domain-validation/#the-real-question","title":"\ud83e\udde0 The Real Question","text":"<p>Are invalid objects impossible to create? Or just possible, but we hope we catch them later?</p> <p>This isn't about where you check things. It\u2019s about who owns the truth.</p>"},{"location":"categories/domain/domain-validation/#signs-of-trouble","title":"\ud83d\udca5 Signs of Trouble","text":"<ul> <li>Validation is duplicated: in controller, service, AND domain  </li> <li>Validation is missing from object construction  </li> <li>Object is valid at first... until someone sets a field to something insane  </li> <li>Test cases: full of mocks, none for actual invalid state</li> </ul>"},{"location":"categories/domain/domain-validation/#good-validation-happens-when","title":"\u2705 Good Validation Happens When\u2026","text":"<ul> <li>The domain refuses to represent illegal states   \u2192 Constructor/factory enforce invariants  </li> <li>Validation logic lives close to the model   \u2192 Not in a random controller or middleware  </li> <li>You encode \u201cwhy this is wrong\u201d with types, not just strings</li> </ul>"},{"location":"categories/domain/domain-validation/#litmus-tests","title":"\ud83d\udd0d Litmus Tests","text":"<ul> <li>Can a developer construct an invalid object in one line?  </li> <li>Does your \u201cdomain\u201d silently accept bad input and rely on downstream logic to yell?</li> </ul>"},{"location":"categories/domain/domain-validation/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: But isn\u2019t this heavy-handed? A: Not if you care about trust. Code that can be invalid, eventually will be.</p> </li> <li> <p>Q: Shouldn\u2019t validation be centralized? A: Centralizing rules \u2260 scattering responsibility.</p> </li> </ul>"},{"location":"categories/domain/domain-validation/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Immutable domain construction  </li> <li>[ ] Type-driven error encoding  </li> <li>[ ] Fail-fast principle in model creation  </li> </ul>"},{"location":"categories/domain/inheritance-integrity/","title":"Is Your Inheritance a Design Model\u2014or Just a Field Merger?","text":"<p>Type: Structure Category: Domain Audience: Anyone who thinks \"extends\" means \"understands\"</p>"},{"location":"categories/domain/inheritance-integrity/#why-this-matters","title":"\ud83e\udd14 Why This Matters","text":"<p>Inheritance looks like reuse. But in systems, it\u2019s often just a silent entanglement.</p> <p>Used wrong, inheritance isn\u2019t a structure\u2014it\u2019s a trapdoor.</p>"},{"location":"categories/domain/inheritance-integrity/#danger-signs","title":"\ud83d\udea8 Danger Signs","text":"<ul> <li>A subclass exists, but adds no real behavior\u2014just fields  </li> <li>Parent and child differ in validation rules  </li> <li>Removing the parent breaks half the unrelated services  </li> <li>You're not sure what the subtype means, just that it shares some columns</li> </ul>"},{"location":"categories/domain/inheritance-integrity/#better-structures","title":"\u2705 Better Structures","text":"<ul> <li>Use composition unless the subtype behaves differently </li> <li>If two models share shape but not meaning, keep them separate  </li> <li>Make inheritance explicit at the behavior level (<code>execute()</code>, <code>isAllowed()</code>)  </li> <li>Document: \u201cwhy does this extend that?\u201d</li> </ul>"},{"location":"categories/domain/inheritance-integrity/#real-question","title":"\ud83e\udde0 Real Question","text":"<p>Does this inheritance reflect shared semantics\u2014or just data gravity?</p> <p>Are you modeling a reality, or avoiding effort?</p>"},{"location":"categories/domain/inheritance-integrity/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: But the shape is the same. Isn\u2019t reuse natural? A: The shape is irrelevant. The meaning isn\u2019t.</p> </li> <li> <p>Q: Should I always avoid inheritance? A: No. Just don\u2019t use it because your ORM makes it easy.</p> </li> </ul>"},{"location":"categories/domain/inheritance-integrity/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Polymorphism with semantics  </li> <li>[ ] Inheritance vs delegation  </li> <li>[ ] Separation of shape and meaning  </li> </ul>"},{"location":"categories/domain/invalid-states/","title":"Can Your System Even Represent an Invalid State?","text":"<p>Type: Structure Category: Domain Audience: People who think enums solve everything</p>"},{"location":"categories/domain/invalid-states/#first-principle","title":"\ud83d\udea8 First Principle","text":"<p>If your system can represent something invalid, someone will.</p>"},{"location":"categories/domain/invalid-states/#what-this-question-is-really-about","title":"\ud83e\udde0 What This Question Is Really About","text":"<p>This isn\u2019t just \u201cdo you have validation.\u201d It\u2019s: does your model forbid nonsense\u2014or just quietly permit it?</p> <p>You don\u2019t need more tests. You need fewer ways to go wrong.</p>"},{"location":"categories/domain/invalid-states/#common-leaks","title":"\ud83d\udd0d Common Leaks","text":"<ul> <li><code>User(status: Int)</code> with <code>7</code> as a possible value  </li> <li><code>Task(state: String)</code> that can be <code>\"completed\"</code> and <code>\"in-progress\"</code> simultaneously  </li> <li><code>Nullable&lt;Boolean&gt;</code> \u2192 Why is your system unsure if something is true or false?</li> </ul>"},{"location":"categories/domain/invalid-states/#structural-fixes","title":"\u2705 Structural Fixes","text":"<ul> <li>Use enums, sealed types, and tagged unions with intent  </li> <li>Constructors should be unable to produce an invalid object  </li> <li>Optional? Only when meaningful absence is part of the domain  </li> <li>A domain model that \u201caccepts everything\u201d is just a list of hazards</li> </ul>"},{"location":"categories/domain/invalid-states/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t this over-design? A: No. It\u2019s pre-accident design.</p> </li> <li> <p>Q: Can\u2019t I validate later? A: Sure\u2014after someone\u2019s already been harmed.</p> </li> </ul>"},{"location":"categories/domain/invalid-states/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] State machine enforcement  </li> <li>[ ] Eliminating ambiguity in domain states  </li> <li>[ ] Invalid-by-construction prevention  </li> </ul>"},{"location":"categories/non-functional/logging-for-troubleshooting/","title":"Is the Logging Strategy Sufficient for Troubleshooting?","text":"<p>Type: Structure Category: Non-functional Audience: Backend engineers, SREs, platform teams, observability owners</p>"},{"location":"categories/non-functional/logging-for-troubleshooting/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Logs are not just for developers\u2014they\u2019re lifelines during failure.</p> <p>This perspective checks whether your logging strategy provides enough context and structure to support fast, reliable incident diagnosis and postmortem analysis.</p>"},{"location":"categories/non-functional/logging-for-troubleshooting/#logging-pain-points","title":"\ud83d\udd0d Logging Pain Points","text":"<ul> <li>No correlation ID between API, job, and DB traces  </li> <li>User actions are not clearly tied to internal events  </li> <li>Logs only show stack traces, not system state  </li> <li>High-volume logs drown out important anomalies  </li> <li>Sensitive data appears in logs or is overly redacted</li> </ul>"},{"location":"categories/non-functional/logging-for-troubleshooting/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>\u201cIt failed\u201d but no insight into why or what triggered it  </li> <li>Can\u2019t trace user impact across distributed components  </li> <li>Devs need to SSH into prod to find relevant logs  </li> <li>No logs around failure-time due to buffering or crash  </li> <li>Logging format inconsistency breaks analysis tools</li> </ul>"},{"location":"categories/non-functional/logging-for-troubleshooting/#smarter-logging-design","title":"\u2705 Smarter Logging Design","text":"<ul> <li>Use structured logging: JSON or context-rich formats  </li> <li>Always include request ID, user ID, operation name  </li> <li>Log inputs, outcomes, and durations\u2014not just errors  </li> <li>Define log levels clearly: info, warn, error, fatal  </li> <li>Secure logs with access control and field redaction</li> </ul>"},{"location":"categories/non-functional/logging-for-troubleshooting/#principle","title":"\u26a0\ufe0f Principle","text":"<p>If your logs can\u2019t explain failure, they\u2019re just expensive noise.</p>"},{"location":"categories/non-functional/logging-for-troubleshooting/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Should everything be logged? A: No. Log only what you\u2019d need in a crisis\u2014and ensure it\u2019s understandable.</p> </li> <li> <p>Q: What\u2019s structured logging? A: Log data as key-value pairs with traceable metadata, not raw text blobs.</p> </li> </ul>"},{"location":"categories/non-functional/logging-for-troubleshooting/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Traceability across services  </li> <li>[ ] Log format standardization  </li> <li>[ ] Alerting from log signals  </li> <li>[ ] Redaction and audit compliance</li> </ul>"},{"location":"categories/non-functional/observability-alerting/","title":"Are Monitoring Targets Well-Defined and Alerts Properly Configured?","text":"<p>Type: Structure Category: Non-functional Audience: SREs, platform engineers, backend leads, reliability owners</p>"},{"location":"categories/non-functional/observability-alerting/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>If a system fails silently, it fails completely.</p> <p>This perspective checks whether your monitoring targets are explicitly defined, aligned with business risk, and wired to clear, actionable alerting.</p>"},{"location":"categories/non-functional/observability-alerting/#monitoring-must-haves","title":"\ud83d\udd0d Monitoring Must-Haves","text":"<ul> <li>Request rate, error rate, latency (RED metrics)  </li> <li>Resource saturation: CPU, memory, DB pool, disk  </li> <li>External API health and SLA tracking  </li> <li>Queue depth and job retries  </li> <li>User-visible behavior: blank screens, login failures, broken workflows</li> </ul>"},{"location":"categories/non-functional/observability-alerting/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Infra is monitored, but application issues go undetected  </li> <li>No distinction between \u201cwarning\u201d and \u201curgent\u201d alerts  </li> <li>Notification fatigue: too many noisy or flapping alerts  </li> <li>Alerts lack context: responder unsure what triggered it  </li> <li>Monitored metrics not tied to service-level indicators (SLIs)</li> </ul>"},{"location":"categories/non-functional/observability-alerting/#smarter-observability-strategy","title":"\u2705 Smarter Observability Strategy","text":"<ul> <li>Define what \u201cbad looks like\u201d in metrics and logs  </li> <li>Align alerts to user pain, not just system status  </li> <li>Include actionable info: what\u2019s broken, who\u2019s impacted, where to look  </li> <li>Review alert history to eliminate dead weight  </li> <li>Correlate alerts with incident causes and recovery timelines</li> </ul>"},{"location":"categories/non-functional/observability-alerting/#principle","title":"\u26a0\ufe0f Principle","text":"<p>If it\u2019s not being watched, it\u2019s already broken\u2014you just don\u2019t know it yet.</p>"},{"location":"categories/non-functional/observability-alerting/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: How many alerts is too many? A: If humans stop reading them, you\u2019ve gone too far. Less is more\u2014if better targeted.</p> </li> <li> <p>Q: Who defines what to monitor? A: The team that owns the feature. Monitoring is a product concern.</p> </li> </ul>"},{"location":"categories/non-functional/observability-alerting/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] SLO/SLA/SLI alignment  </li> <li>[ ] Alert fatigue and deduplication  </li> <li>[ ] Observability for async workflows  </li> <li>[ ] On-call response design and routing</li> </ul>"},{"location":"categories/non-functional/operational-burden/","title":"Is the Operational Flow Designed to Minimize Dev and Support Burden?","text":"<p>Type: Structure Category: Non-functional Audience: Developers, SREs, support leads, system architects</p>"},{"location":"categories/non-functional/operational-burden/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>A well-designed system doesn\u2019t just run\u2014it heals, explains, and supports itself.</p> <p>This perspective checks whether day-to-day operations are streamlined to avoid excessive burden on development and customer support teams.</p>"},{"location":"categories/non-functional/operational-burden/#friction-points-to-watch","title":"\ud83d\udd0d Friction Points to Watch","text":"<ul> <li>Ops steps require manual DB queries or admin panels  </li> <li>Logs and alerts are too sparse or noisy for triage  </li> <li>Support needs engineering help for every user question  </li> <li>Recovery or retry requires full developer intervention  </li> <li>Feature flags or config changes require redeploys</li> </ul>"},{"location":"categories/non-functional/operational-burden/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>\u201cAsk the dev\u201d becomes standard ops process  </li> <li>No self-serve tools for CS or QA teams  </li> <li>Observability exists but doesn\u2019t explain user-facing issues  </li> <li>On-call fatigue due to repetitive low-impact alerts  </li> <li>Config drift due to manual toggle or DB edits</li> </ul>"},{"location":"categories/non-functional/operational-burden/#smarter-ops-flow-design","title":"\u2705 Smarter Ops Flow Design","text":"<ul> <li>Document what ops must do, not just how code works  </li> <li>Design admin/ops interfaces for non-engineers  </li> <li>Include observability for intent, not just error  </li> <li>Automate recovery where safe: retries, restores, rollbacks  </li> <li>Separate config from deploy: use remote toggles or control panels</li> </ul>"},{"location":"categories/non-functional/operational-burden/#principle","title":"\u26a0\ufe0f Principle","text":"<p>You\u2019re not done designing until the system supports itself.</p>"},{"location":"categories/non-functional/operational-burden/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t some ops always manual? A: Yes. But repeatable actions should be automated or self-served.</p> </li> <li> <p>Q: Who owns operational UX? A: The same team that owns the feature. Ownership includes usability\u2014for humans.</p> </li> </ul>"},{"location":"categories/non-functional/operational-burden/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Alert design and triage flow  </li> <li>[ ] Self-serve administration patterns  </li> <li>[ ] Support tooling and user impact visibility  </li> <li>[ ] Rollback automation and recovery UX</li> </ul>"},{"location":"categories/non-functional/recovery-runbook/","title":"Are Recovery Steps Clearly Defined for Incidents?","text":"<p>Type: DeepDive Category: Non-functional Audience: SREs, platform engineers, on-call responders, incident managers</p>"},{"location":"categories/non-functional/recovery-runbook/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Incidents are inevitable. But how much damage they cause\u2014and how long it lasts\u2014depends on whether the team knows what to do next.</p> <p>This perspective checks whether your system has recovery steps documented, accessible, and tested under pressure.</p>"},{"location":"categories/non-functional/recovery-runbook/#situations-that-demand-runbooks","title":"\ud83d\udd0d Situations That Demand Runbooks","text":"<ul> <li>Downtime caused by DB overload or network partition  </li> <li>Stuck background jobs, retries, or event queue buildup  </li> <li>Misconfig or flag change leading to user-visible errors  </li> <li>Service-to-service dependency failure with cascade risk  </li> <li>Authentication/authorization outages blocking access</li> </ul>"},{"location":"categories/non-functional/recovery-runbook/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Only senior devs know how to fix certain issues  </li> <li>Steps to restart a subsystem require tribal knowledge  </li> <li>Manual fixes are risky, undocumented, or error-prone  </li> <li>No clear timeline for response or escalation  </li> <li>On-call fatigue due to repeated \u201cfigure-it-out\u201d recoveries</li> </ul>"},{"location":"categories/non-functional/recovery-runbook/#smarter-incident-recovery-design","title":"\u2705 Smarter Incident Recovery Design","text":"<ul> <li>Write playbooks: if X fails, do Y (with context and safety tips)  </li> <li>Store runbooks with version control and team-wide access  </li> <li>Include not just \u201cwhat\u201d to do but \u201cwhy\u201d it matters  </li> <li>Automate common diagnostics or partial recovery steps  </li> <li>Review runbooks after incidents\u2014treat them as living artifacts</li> </ul>"},{"location":"categories/non-functional/recovery-runbook/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Recovery is not just reaction. It\u2019s practiced response under pressure.</p>"},{"location":"categories/non-functional/recovery-runbook/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t every incident unique? A: Yes. But most share patterns. Good runbooks guide\u2014not replace\u2014thinking.</p> </li> <li> <p>Q: Where should runbooks live? A: Wherever your on-call responders will find them in 30 seconds or less.</p> </li> </ul>"},{"location":"categories/non-functional/recovery-runbook/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Automated diagnostics integration  </li> <li>[ ] Incident communication plans  </li> <li>[ ] Playbook rotation and testing  </li> <li>[ ] Observability tied to recovery scenarios</li> </ul>"},{"location":"categories/non-functional/security-risks/","title":"Are Security Risks Considered?","text":"<p>Type: Structure Category: Non-functional Audience: Security engineers, reviewers, backend/API owners</p>"},{"location":"categories/non-functional/security-risks/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Security doesn\u2019t come from good intentions. It comes from explicit decisions about what\u2019s protected, how, and by whom.</p> <p>This perspective checks whether sensitive data, authentication, and authorization are covered as active design concerns.</p>"},{"location":"categories/non-functional/security-risks/#typical-risk-vectors","title":"\ud83d\udd0d Typical Risk Vectors","text":"<ul> <li>Personal information (PII) and financial data in logs or payloads  </li> <li>API endpoints lacking role-based or tenant-based access control  </li> <li>Weak session handling or token misuse  </li> <li>Inconsistent or unclear permission models between domains and UI  </li> <li>Secrets stored in code or misconfigured environment access</li> </ul>"},{"location":"categories/non-functional/security-risks/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>\"Hidden in UI\" \u2260 protected at API level  </li> <li>Sensitive fields exposed in logs or metrics  </li> <li>Permission logic duplicated and drifting in multiple services  </li> <li>JWTs or OAuth tokens not validated against revocation or scope  </li> <li>Security handled only at edge\u2014not in application logic</li> </ul>"},{"location":"categories/non-functional/security-risks/#smarter-security-design","title":"\u2705 Smarter Security Design","text":"<ul> <li>Map out sensitive data flow: where does it go, who can see it?  </li> <li>Define access control at multiple layers (domain, use-case, endpoint)  </li> <li>Use structured permission models: roles, scopes, policies  </li> <li>Log access to sensitive data with auditing intent  </li> <li>Treat secrets and credentials as infrastructure\u2014not source code</li> </ul>"},{"location":"categories/non-functional/security-risks/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Security is not a patch. It\u2019s a set of enforced design boundaries.</p>"},{"location":"categories/non-functional/security-risks/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t the frontend enough to hide sensitive fields? A: No. Anything rendered client-side must be protected server-side.</p> </li> <li> <p>Q: Where should permissions live? A: Domain defines who can act. Use-case enforces it. Endpoint restricts access.</p> </li> </ul>"},{"location":"categories/non-functional/security-risks/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] API authorization enforcement  </li> <li>[ ] Logging and redaction strategy  </li> <li>[ ] Role and permission model design  </li> <li>[ ] Data classification and encryption scopes</li> </ul>"},{"location":"categories/performance/api-response-latency/","title":"Is API Latency Acceptable\u2014and Understood?","text":"<p>Type: DeepDive Category: Performance Audience: Engineers designing APIs, monitoring behavior, or debugging UX issues</p>"},{"location":"categories/performance/api-response-latency/#whats-actually-being-asked","title":"\ud83e\udde0 What\u2019s Actually Being Asked","text":"<p>Not \u201cis it fast?\u201d But:</p> <ul> <li>Is the latency acceptable under current conditions?  </li> <li>Is it predictable under load?  </li> <li>Do you know what contributes to the delay?</li> </ul>"},{"location":"categories/performance/api-response-latency/#typical-issues","title":"\ud83d\udea8 Typical Issues","text":"<ul> <li>High latency only under load\u2014but no alerts fire  </li> <li>Spikes caused by background tasks or queue congestion  </li> <li>DB roundtrips and N+1 queries hidden in controller logic  </li> <li>Cold caches after deploys or config changes  </li> <li>API clients adding retry loops, compounding the slowness</li> </ul>"},{"location":"categories/performance/api-response-latency/#healthier-latency-design","title":"\u2705 Healthier Latency Design","text":"<ul> <li>Define SLOs and plot real distribution, not averages  </li> <li>Include latency budget breakdown in API design docs  </li> <li>Use timeout budgeting to balance retries vs user experience  </li> <li>Log latency contributors per request (DB, cache, external API)</li> </ul>"},{"location":"categories/performance/api-response-latency/#design-framing","title":"\u26a0\ufe0f Design Framing","text":"<p>Latency is not a number. It\u2019s a conversation between client pain and backend design.</p>"},{"location":"categories/performance/api-response-latency/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Our p95 is fine. Is that good enough? A: Not if your tail spikes hurt the user more than your average helps.</p> </li> <li> <p>Q: Can we just throw more infra at it? A: You can. Until you can\u2019t afford to.</p> </li> </ul>"},{"location":"categories/performance/api-response-latency/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Tail latency and p99 thinking  </li> <li>[ ] Budgeting for retries and fallback  </li> <li>[ ] Observability aligned with user pain  </li> </ul>"},{"location":"categories/performance/backend-bottlenecks/","title":"Are Backend Bottlenecks Designed Out\u2014or Just Discovered Later?","text":"<p>Type: DeepDive Category: Performance Audience: Engineers responsible for architecture, resource allocation, or debugging production slowness</p>"},{"location":"categories/performance/backend-bottlenecks/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>You can\u2019t eliminate all bottlenecks. But you can decide which ones are acceptable\u2014and when.</p>"},{"location":"categories/performance/backend-bottlenecks/#symptoms-of-undesigned-bottlenecks","title":"\ud83d\udea8 Symptoms of Undesigned Bottlenecks","text":"<ul> <li>Intermittent slowness under load, but no clear root cause  </li> <li>DB or storage tiers doing \u201cjust fine\u201d\u2014until cascading latency hits  </li> <li>Feature X suffers when Feature Y gets traffic  </li> <li>Shared background worker pool starving critical tasks  </li> <li>Nobody knows which task owns the CPU/memory spike</li> </ul>"},{"location":"categories/performance/backend-bottlenecks/#proactive-bottleneck-design","title":"\u2705 Proactive Bottleneck Design","text":"<ul> <li>Budget IOPS, CPU, memory per feature or queue  </li> <li>Assign explicit priority to background tasks  </li> <li>Isolate high-load tenants from shared infrastructure  </li> <li>Visualize workload mix over time\u2014not just peak load  </li> <li>Include \u201cslow path\u201d UX impact in design reviews</li> </ul>"},{"location":"categories/performance/backend-bottlenecks/#framing-shift","title":"\u26a0\ufe0f Framing Shift","text":"<p>Bottlenecks aren\u2019t failures. They\u2019re choices about who gets hurt first.</p> <p>Make that choice on purpose.</p>"},{"location":"categories/performance/backend-bottlenecks/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just scale up? A: If you don\u2019t know what\u2019s slow, scaling helps\u2026until it doesn\u2019t.</p> </li> <li> <p>Q: Shouldn\u2019t the infra team handle this? A: Infra can give you capacity. Only you know how it\u2019s used.</p> </li> </ul>"},{"location":"categories/performance/backend-bottlenecks/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Resource-aware design reviews  </li> <li>[ ] Multi-tenant load shaping  </li> <li>[ ] Background task prioritization  </li> </ul>"},{"location":"categories/performance/cache-strategy/","title":"Is Caching Helping\u2014or Just Hiding Slowness?","text":"<p>Type: DeepDive Category: Performance Audience: Engineers using cache layers, CDN, or performance tuning techniques</p>"},{"location":"categories/performance/cache-strategy/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Caching is powerful. Which is why it\u2019s dangerous.</p> <ul> <li>It can make performance look good\u2014until it expires  </li> <li>It can mask structural inefficiencies in schema or query design  </li> <li>It can add fragility when staleness isn\u2019t tolerable</li> </ul>"},{"location":"categories/performance/cache-strategy/#anti-patterns","title":"\ud83d\udea8 Anti-Patterns","text":"<ul> <li>Over-aggressive caching of incomplete or inconsistent data  </li> <li>No cache invalidation on updates \u2192 stale reads  </li> <li>Cache as the \u201creal source of truth\u201d in some endpoints  </li> <li>Deployment clears cache \u2192 first N users suffer  </li> <li>Caching what\u2019s cheap, not what\u2019s slow</li> </ul>"},{"location":"categories/performance/cache-strategy/#better-cache-strategy","title":"\u2705 Better Cache Strategy","text":"<ul> <li>Cache what\u2019s expensive and stable\u2014not just popular  </li> <li>Pair every cache with an invalidation trigger or TTL  </li> <li>Use \u201cstale-while-revalidate\u201d patterns where freshness is soft  </li> <li>Treat cache misses as observability events  </li> <li>Separate layers: CDN vs app cache vs local object memoization</li> </ul>"},{"location":"categories/performance/cache-strategy/#key-principle","title":"\ud83e\udde0 Key Principle","text":"<p>Cache is not a fix. It\u2019s a bet\u2014that reads will outweigh writes, and that risk is acceptable.</p>"},{"location":"categories/performance/cache-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Should we cache everything \u201cjust in case\u201d? A: That\u2019s not safety. That\u2019s entropy.</p> </li> <li> <p>Q: Can cache be the primary data source? A: Only if you're also designing the failure modes.</p> </li> </ul>"},{"location":"categories/performance/cache-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Caching and consistency tradeoffs  </li> <li>[ ] Cache-layer observability  </li> <li>[ ] Staleness risk in read-path design  </li> </ul>"},{"location":"categories/performance/db-index-optimization/","title":"Have You Designed Query Performance\u2014or Just Hoped the DB \u201cHandles It\u201d?","text":"<p>Type: DeepDive Category: Performance Audience: Engineers dealing with growing tables, slow dashboards, or unexplained latency</p>"},{"location":"categories/performance/db-index-optimization/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>This is not just about \u201cadding indexes.\u201d It\u2019s about designing for how queries behave under growth and concurrency.</p> <p>This touches:</p> <ul> <li>Index choice and placement  </li> <li>Query patterns (joins, filters, pagination)  </li> <li>Read amplification and disk cost  </li> <li>Cache invalidation and fallback paths</li> </ul>"},{"location":"categories/performance/db-index-optimization/#what-goes-wrong-in-practice","title":"\ud83d\udea8 What Goes Wrong in Practice","text":"<ul> <li>Latency spikes on pages nobody thought were critical  </li> <li>Multiple indexes fighting over the same table  </li> <li>Joins optimized for logic, not I/O locality  </li> <li>Filters on low-cardinality fields that kill index usefulness  </li> <li>No clear plan for data aging or pruning</li> </ul>"},{"location":"categories/performance/db-index-optimization/#healthier-performance-thinking","title":"\u2705 Healthier Performance Thinking","text":"<ul> <li>Design queries from access pattern\u2014not schema shape  </li> <li>Monitor \u201cquery heat\u201d over time, not just in load tests  </li> <li>Write-specific indexes for read-heavy endpoints  </li> <li>Embrace partial indexes or filtered indexes where applicable  </li> <li>Plan index lifecycle: create, evolve, retire</li> </ul>"},{"location":"categories/performance/db-index-optimization/#core-tradeoffs","title":"\ud83e\udde0 Core Tradeoffs","text":"<p>You\u2019re always balancing:</p> <ul> <li>Storage vs speed  </li> <li>Index maintenance cost vs query benefit  </li> <li>Latency variance vs code complexity</li> </ul>"},{"location":"categories/performance/db-index-optimization/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: What if I don\u2019t know which queries matter yet? A: Then build for observability first\u2014optimize later.</p> </li> <li> <p>Q: Can\u2019t the ORM optimize this for us? A: It can write queries. It can\u2019t make them good.</p> </li> </ul>"},{"location":"categories/performance/db-index-optimization/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Query-first schema evaluation  </li> <li>[ ] Index conflict analysis  </li> <li>[ ] Visibility into query heatmap over time  </li> </ul>"},{"location":"categories/performance/external-pressure-resilience/","title":"Can You Handle External Load Spikes Gracefully?","text":"<p>Type: DeepDive Category: Performance Audience: Engineers integrating third-party APIs, external systems, or shared infrastructure</p>"},{"location":"categories/performance/external-pressure-resilience/#what-this-is-really-about","title":"\ud83e\udde0 What This Is Really About","text":"<p>When an external dependency gets slow or flakey\u2014 what happens to your system?</p> <ul> <li>Do users get blocked?  </li> <li>Do retries pile up and crush the queue?  </li> <li>Does circuit breaking work as intended?</li> </ul>"},{"location":"categories/performance/external-pressure-resilience/#what-can-go-wrong","title":"\ud83d\udea8 What Can Go Wrong","text":"<ul> <li>Synchronous dependencies cause upstream timeouts  </li> <li>Retry storms triggered by brief outages  </li> <li>Thread or worker pools exhausted by long-waiting calls  </li> <li>Clients hammer your own API when a downstream system stalls  </li> <li>Errors misclassified as timeouts or 500s \u2192 no alert</li> </ul>"},{"location":"categories/performance/external-pressure-resilience/#healthier-patterns","title":"\u2705 Healthier Patterns","text":"<ul> <li>Use circuit breakers with fallback responses  </li> <li>Queue isolation: don\u2019t let one downstream service monopolize capacity  </li> <li>Use retries with exponential backoff and jitter  </li> <li>Fast-fail logic for known high-latency paths  </li> <li>Alert on change in external latency profile, not just error rate</li> </ul>"},{"location":"categories/performance/external-pressure-resilience/#design-frame","title":"\u26a0\ufe0f Design Frame","text":"<p>Dependency pressure isn\u2019t an edge case. It\u2019s the default condition of internet-scale systems.</p>"},{"location":"categories/performance/external-pressure-resilience/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just retry more? A: Not if it breaks everything else.</p> </li> <li> <p>Q: Should we always fall back? A: Only if degraded UX is better than outage.</p> </li> </ul>"},{"location":"categories/performance/external-pressure-resilience/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Circuit breaking vs fail-slow vs fail-fast  </li> <li>[ ] Load shedding and queuing theory  </li> <li>[ ] Third-party dependency observability  </li> </ul>"},{"location":"categories/performance/indexing-paths/","title":"Are Your Indexes Aligned with Query Paths?","text":"<p>Type: DeepDive Category: Performance Audience: Engineers optimizing specific endpoints, heavy queries, or complex filters</p>"},{"location":"categories/performance/indexing-paths/#what-this-perspective-is-really-about","title":"\ud83e\udde0 What This Perspective Is Really About","text":"<p>Not all indexes are equal. And not all queries deserve them.</p> <p>This perspective asks:</p> <ul> <li>Is this query actually using an index?</li> <li>Is the index ordered correctly for this filter + sort?</li> <li>Are your composite indexes aligned with query predicates?</li> </ul>"},{"location":"categories/performance/indexing-paths/#typical-pain-points","title":"\ud83d\udea8 Typical Pain Points","text":"<ul> <li>N+1 joins on non-indexed foreign keys  </li> <li>Composite indexes where predicate order doesn\u2019t match usage  </li> <li>Queries filtered on <code>LOW_CARDINALITY = ?</code> killing selectivity  </li> <li>Indexes built for legacy queries now unused  </li> <li>Missed use of <code>covering indexes</code> for heavy endpoints</li> </ul>"},{"location":"categories/performance/indexing-paths/#good-index-to-query-alignment","title":"\u2705 Good Index-to-Query Alignment","text":"<ul> <li>Start from query logs / heatmaps \u2192 identify hot paths  </li> <li>Run <code>EXPLAIN</code> to verify index hits\u2014not guess  </li> <li>Structure composite indexes to match most-selective predicates first  </li> <li>Consider filtered indexes when full coverage isn\u2019t needed  </li> <li>Drop dead indexes proactively to reduce bloat and conflict</li> </ul>"},{"location":"categories/performance/indexing-paths/#core-principle","title":"\ud83e\udde0 Core Principle","text":"<p>You\u2019re not designing a schema. You\u2019re designing query execution under pressure.</p>"},{"location":"categories/performance/indexing-paths/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Our queries seem fast. Is that enough? A: Until your dataset grows or cache misses spike.</p> </li> <li> <p>Q: Can\u2019t the DB just figure it out? A: It tries. But your structure limits its options.</p> </li> </ul>"},{"location":"categories/performance/indexing-paths/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Query heat observability  </li> <li>[ ] Composite index ordering  </li> <li>[ ] Avoiding accidental full scans  </li> </ul>"},{"location":"categories/performance/scaling-strategy/","title":"Is Your Scaling Strategy Designed\u2014or Just Assumed?","text":"<p>Type: DeepDive Category: Performance Audience: Engineers preparing for growth, traffic spikes, or multi-tenant architectures</p>"},{"location":"categories/performance/scaling-strategy/#what-this-perspective-asks","title":"\ud83e\udde0 What This Perspective Asks","text":"<ul> <li>What happens when load triples overnight?  </li> <li>Which parts of the system become bottlenecks?  </li> <li>Do you scale up? Scale out? Degrade gracefully?</li> </ul> <p>Most systems are \u201cscalable\u201d \u2014until they actually scale.</p>"},{"location":"categories/performance/scaling-strategy/#what-breaks","title":"\ud83d\udea8 What Breaks","text":"<ul> <li>One database serves multiple high-traffic features  </li> <li>Horizontal scaling assumed, but stateful logic blocks it  </li> <li>Feature flags load config on every request  </li> <li>Per-tenant bottlenecks invisible in global metrics  </li> <li>Load testing ignores cold-start conditions</li> </ul>"},{"location":"categories/performance/scaling-strategy/#healthier-scaling-strategy","title":"\u2705 Healthier Scaling Strategy","text":"<ul> <li>Explicitly model resource ownership: CPU, DB, IOPS, mem  </li> <li>Plan per-feature and per-tenant scaling paths  </li> <li>Separate config loads from hot-paths  </li> <li>Test for hot-boot, cold-start, and partial-dependency performance  </li> <li>Define when degradation is acceptable\u2014and what gets dropped first</li> </ul>"},{"location":"categories/performance/scaling-strategy/#design-philosophy","title":"\u26a0\ufe0f Design Philosophy","text":"<p>Scalability isn\u2019t about infrastructure. It\u2019s about knowing which limits come first\u2014and who they\u2019ll hurt.</p>"},{"location":"categories/performance/scaling-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: But we\u2019re on Kubernetes. Doesn\u2019t it scale? A: Pods scale. Architectural limits don\u2019t move.</p> </li> <li> <p>Q: Should we optimize now or later? A: Design the escape hatch now. Use it later.</p> </li> </ul>"},{"location":"categories/performance/scaling-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Bottleneck detection across features  </li> <li>[ ] Tenant isolation vs pooled limits  </li> <li>[ ] Graceful degradation strategies  </li> </ul>"},{"location":"categories/release/impact-analysis-for-critical-changes/","title":"Is Impact Analysis Performed for Critical Changes?","text":"<p>Type: DeepDive Category: Release Audience: Tech leads, architects, SREs, and reviewers overseeing high-risk changes</p>"},{"location":"categories/release/impact-analysis-for-critical-changes/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>When the change is big, the cost of being wrong explodes.</p> <p>This perspective checks whether critical or cross-cutting changes are assessed for impact across data, infra, UX, team, and rollback safety.</p>"},{"location":"categories/release/impact-analysis-for-critical-changes/#real-world-risk-factors","title":"\ud83d\udd0d Real-World Risk Factors","text":"<ul> <li>Touches multiple domains or teams  </li> <li>Involves data format or schema that affects existing consumers  </li> <li>Changes expected latency, consistency, or performance behavior  </li> <li>Requires coordination with 3rd parties or downstream systems</li> </ul>"},{"location":"categories/release/impact-analysis-for-critical-changes/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Data changes deployed without reverse plan or analytics impact review  </li> <li>Infra configuration altered without traffic validation  </li> <li>Client behavior breaks due to unnoticed schema or API contract shifts  </li> <li>Teams unaware of changes until incident postmortem</li> </ul>"},{"location":"categories/release/impact-analysis-for-critical-changes/#smarter-impact-analysis","title":"\u2705 Smarter Impact Analysis","text":"<ul> <li>Use a checklist: who/what does this change affect?  </li> <li>Evaluate impact across runtime, deploy, data, ops, support  </li> <li>Simulate edge cases and failure scenarios\u2014don\u2019t just test success  </li> <li>Involve downstream teams in pre-release validation  </li> <li>Classify rollback complexity: safe, partial, irreversible?</li> </ul>"},{"location":"categories/release/impact-analysis-for-critical-changes/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Scope isn\u2019t just \u201cwhat we built.\u201d It\u2019s what could go wrong because we built it.</p>"},{"location":"categories/release/impact-analysis-for-critical-changes/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t this just review? A: No. Review is what you catch. Impact analysis is what you model.</p> </li> <li> <p>Q: Who owns this? A: The person who approves the change must verify that impact was scoped.</p> </li> </ul>"},{"location":"categories/release/impact-analysis-for-critical-changes/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Rollback readiness  </li> <li>[ ] Schema change validation  </li> <li>[ ] Cross-team change awareness  </li> <li>[ ] Failure simulation before launch  </li> </ul>"},{"location":"categories/release/minimize-downtime/","title":"Is Downtime Minimized Where Unavoidable?","text":"<p>Type: DeepDive Category: Release Audience: SREs, backend engineers, infra architects managing service reliability</p>"},{"location":"categories/release/minimize-downtime/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Some releases will require downtime. But not all downtime is equal.</p> <p>This perspective examines how to minimize service disruption, both in duration and impact.</p>"},{"location":"categories/release/minimize-downtime/#example-scenarios","title":"\ud83d\udd0d Example Scenarios","text":"<ul> <li>DB migrations with exclusive locks  </li> <li>Monolithic systems with no hot-reload mechanism  </li> <li>Large-scale batch updates that cannot stream  </li> <li>Deployments needing cross-node coordination resets</li> </ul>"},{"location":"categories/release/minimize-downtime/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>All users experience full downtime for minutes or hours  </li> <li>No estimation or communication of window timing  </li> <li>Scheduled at peak traffic times  </li> <li>Restoration needs manual intervention or coordination</li> </ul>"},{"location":"categories/release/minimize-downtime/#smarter-downtime-planning","title":"\u2705 Smarter Downtime Planning","text":"<ul> <li>Can the system be partially up (read-only mode, admin-only)?  </li> <li>Split change into multiple smaller steps with partial releases  </li> <li>Schedule based on traffic analytics, not guesswork  </li> <li>Provide countdowns or banners in UI to prepare users  </li> <li>Have automated recovery and alerting tied to restart conditions</li> </ul>"},{"location":"categories/release/minimize-downtime/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Downtime is sometimes inevitable. But user surprise and prolonged recovery are not.</p>"},{"location":"categories/release/minimize-downtime/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can we guarantee zero downtime? A: Not always. But minimizing blast radius is always possible.</p> </li> <li> <p>Q: Is partial service worse than full downtime? A: Depends\u2014transparent partial availability is often better than full lockout.</p> </li> </ul>"},{"location":"categories/release/minimize-downtime/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Safe schema migration  </li> <li>[ ] Rollback rehearsal  </li> <li>[ ] Deployment observability  </li> <li>[ ] Real-time user impact alerting</li> </ul>"},{"location":"categories/release/release-strategy-planning/","title":"Is the Release Strategy Defined and Aligned With Change Impact?","text":"<p>Type: Structure Category: Release Audience: Tech leads, backend leads, SREs, and PMs planning production deployment</p>"},{"location":"categories/release/release-strategy-planning/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Release is not deployment. It is a negotiation with failure.</p> <p>Even small changes can cause large damage if release strategy is not considered\u2014 especially under multi-tenant, distributed, or asynchronous conditions.</p>"},{"location":"categories/release/release-strategy-planning/#typical-use-cases","title":"\u2705 Typical Use Cases","text":"<ul> <li>Canary rollout to 5% tenants before global rollout  </li> <li>Feature toggle to decouple code merge from exposure  </li> <li>DB migration that is compatible across both old and new app versions  </li> <li>Stepwise exposure: staging \u2192 internal users \u2192 selected customers \u2192 all users</li> </ul>"},{"location":"categories/release/release-strategy-planning/#common-failure-patterns","title":"\ud83d\udd25 Common Failure Patterns","text":"<ul> <li>All-or-nothing deploy with no rollback path  </li> <li>Feature exposure tied directly to deploy, no toggles or controls  </li> <li>DB schema changes without forward/backward compatibility  </li> <li>Downtime assumed as \u201cunavoidable\u201d due to monolithic migration  </li> <li>Release timing misaligned with business risk window (e.g. peak hours)</li> </ul>"},{"location":"categories/release/release-strategy-planning/#better-release-strategy-design","title":"\ud83d\udee0 Better Release Strategy Design","text":"<ul> <li>Classify the change: is it visible? breaking? reversible?  </li> <li>Design rollout method: toggle, staged, canary, delayed exposure  </li> <li>Include rollback mechanism before merge (infra and data both)  </li> <li>Define observability points: error surge? retry rate? latency spike?  </li> <li>Coordinate internally: who needs to know when and why</li> </ul>"},{"location":"categories/release/release-strategy-planning/#faq","title":"\ud83d\udcd8 FAQ","text":"<ul> <li> <p>Q: Why not fix forward? A: That works only when blast radius is controlled and recovery is fast.</p> </li> <li> <p>Q: Is staging enough? A: No. Only real traffic reveals integration cracks.</p> </li> <li> <p>Q: Who owns release design? A: Every team must own it for what they ship.</p> </li> </ul>"},{"location":"categories/release/release-strategy-planning/#key-principle","title":"\ud83c\udfaf Key Principle","text":"<p>Release \u2260 Code Delivery Release = Risk Framing + Controlled Exposure</p>"},{"location":"categories/release/release-strategy-planning/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] High-load behavior test planning  </li> <li>[ ] Asynchronous system exposure strategy  </li> <li>[ ] Schema compatibility and zero-downtime rollout  </li> <li>[ ] Emergency rollback rehearsal</li> </ul>"},{"location":"categories/release/rollback-strategy/","title":"Is a Rollback Strategy in Place for Critical Changes?","text":"<p>Type: DeepDive Category: Release Audience: SREs, senior engineers, tech leads involved in high-risk deployments</p>"},{"location":"categories/release/rollback-strategy/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>You don\u2019t truly own a system until you can safely undo its changes.</p> <p>This perspective examines whether rollback paths are designed, validated, and executable\u2014not just documented.</p>"},{"location":"categories/release/rollback-strategy/#real-world-risk-cases","title":"\ud83d\udd0d Real-World Risk Cases","text":"<ul> <li>DB schema migration that drops columns  </li> <li>Batch jobs that transform or delete data  </li> <li>Feature rollout that modifies shared state  </li> <li>Deployment that bypasses blue/green isolation</li> </ul>"},{"location":"categories/release/rollback-strategy/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Rollback scripts exist but have never been tested  </li> <li>Infra rollback is possible, but data state is irreversible  </li> <li>Team assumes \u201cfix forward\u201d without safeguards  </li> <li>No plan to rollback partially completed operations</li> </ul>"},{"location":"categories/release/rollback-strategy/#smarter-rollback-strategy","title":"\u2705 Smarter Rollback Strategy","text":"<ul> <li>Identify irreversible operations early (schema, state, external calls)  </li> <li>Separate schema rollout and feature exposure if possible  </li> <li>Test rollback in staging\u2014including data rollback  </li> <li>Automate rollback as a first-class pipeline step  </li> <li>Pair with alerting: know when rollback is needed and whether it worked</li> </ul>"},{"location":"categories/release/rollback-strategy/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Rollback is not backup. It\u2019s an engineered return path.</p>"},{"location":"categories/release/rollback-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Do we always need rollback? A: No. But if rollback isn\u2019t feasible, pre-checks and isolation become more critical.</p> </li> <li> <p>Q: What\u2019s the difference between rollback and revert? A: Rollback implies cleanup and recovery, not just code diff reversal.</p> </li> </ul>"},{"location":"categories/release/rollback-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Change impact modeling  </li> <li>[ ] Migration testing and observability  </li> <li>[ ] Partial failure mitigation  </li> <li>[ ] CI/CD automation for rollback</li> </ul>"},{"location":"categories/release/staged-release-strategy/","title":"Is a Staged Release Strategy in Place?","text":"<p>Type: DeepDive Category: Release Audience: Tech leads, release managers, backend engineers, QA owners managing production rollout risk</p>"},{"location":"categories/release/staged-release-strategy/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Releases don\u2019t need to be all-or-nothing.</p> <p>A stepwise rollout lets you control exposure, validate assumptions, and absorb failure safely.</p>"},{"location":"categories/release/staged-release-strategy/#example-patterns","title":"\ud83d\udd0d Example Patterns","text":"<ul> <li>Start with internal users \u2192 select customers \u2192 general audience  </li> <li>Use feature flags or remote config to gate access  </li> <li>Canary deployment at infra level (e.g., 5% traffic routing)  </li> <li>Schedule releases to coincide with low-traffic windows per tenant group</li> </ul>"},{"location":"categories/release/staged-release-strategy/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Releasing to all users before observing risk  </li> <li>Lacking rollback plan for each phase  </li> <li>No versioning or toggle per group \u2192 rollout becomes binary  </li> <li>Deployment pipelines can\u2019t segment by tenant or region</li> </ul>"},{"location":"categories/release/staged-release-strategy/#smart-staged-release-design","title":"\u2705 Smart Staged Release Design","text":"<ul> <li>Define cohorts: which users/tenants go first, and why?  </li> <li>Add observability per group: errors, latency, usage patterns  </li> <li>Ensure rollback path exists at each step\u2014not just final one  </li> <li>Use flags/toggles to enable fast gating or rollback  </li> <li>Communicate phase plans across teams to align timing</li> </ul>"},{"location":"categories/release/staged-release-strategy/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Speed is not in full release. Speed is in safe, observable rollout.</p>"},{"location":"categories/release/staged-release-strategy/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Is this just \u201ccanary deploy\u201d? A: Canary is one technique. Staged release is broader\u2014can include feature flags, tenants, timing.</p> </li> <li> <p>Q: Does this slow us down? A: No. It makes success repeatable\u2014failure recoverable.</p> </li> </ul>"},{"location":"categories/release/staged-release-strategy/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Tenant-based deployment design  </li> <li>[ ] Feature toggle management  </li> <li>[ ] Rollback plan per cohort  </li> <li>[ ] Coordinated release communication  </li> </ul>"},{"location":"categories/release/user-notification-preparation/","title":"Is User Notification Prepared Where Needed?","text":"<p>Type: Structure Category: Release Audience: Product managers, designers, backend/frontend developers handling release or UX change</p>"},{"location":"categories/release/user-notification-preparation/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Not all changes are self-evident. Some require explanation. Others require trust.</p> <p>Designing change delivery is as critical as designing the change itself.</p>"},{"location":"categories/release/user-notification-preparation/#typical-scenarios","title":"\ud83d\udd14 Typical Scenarios","text":"<ul> <li>UI or interaction pattern changes  </li> <li>API behavior that silently shifts (e.g., sort order, pagination)  </li> <li>Scheduled downtime or rollout impacting data visibility  </li> <li>Feature flags released per tenant or per user group</li> </ul>"},{"location":"categories/release/user-notification-preparation/#failure-patterns","title":"\ud83d\udea8 Failure Patterns","text":"<ul> <li>Users are surprised by behavior shift (\u201cit used to do this\u2026\u201d)  </li> <li>Docs not updated \u2192 support gets overloaded  </li> <li>Admin users unaware of configuration change impacts  </li> <li>Notification was added too late to coordinate translation/review</li> </ul>"},{"location":"categories/release/user-notification-preparation/#good-notification-planning","title":"\u2705 Good Notification Planning","text":"<ul> <li>Who needs to know? When? How early?  </li> <li>Embed messages into UI or release notes\u2014not just email  </li> <li>If i18n needed, schedule translation before freeze  </li> <li>Ensure rollback path considers user state (e.g., partially migrated data)</li> </ul>"},{"location":"categories/release/user-notification-preparation/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Communication is a design dependency. If left out, the system will behave unpredictably\u2014for humans.</p>"},{"location":"categories/release/user-notification-preparation/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Is this PM\u2019s job? A: Yes\u2014and also engineering\u2019s responsibility to surface risk.</p> </li> <li> <p>Q: Do we always notify? A: No. But when surprise is dangerous, silence is failure.</p> </li> </ul>"},{"location":"categories/release/user-notification-preparation/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Release scope classification  </li> <li>[ ] Translation-aware UI planning  </li> <li>[ ] Alerting user-facing behavior regressions  </li> </ul>"},{"location":"categories/security/authn-authz-implementation/","title":"Is Your Auth Implementation Predictable, Testable, and Isolated?","text":"<p>Type: DeepDive Category: Security Audience: Engineers implementing login, session, token, or permissions in SaaS systems</p>"},{"location":"categories/security/authn-authz-implementation/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Authentication (AuthN) and Authorization (AuthZ) are not features. They are foundations\u2014and when shaky, everything on top suffers.</p>"},{"location":"categories/security/authn-authz-implementation/#auth-fragility-patterns","title":"\ud83d\udea8 Auth Fragility Patterns","text":"<ul> <li>Auth logic split across middlewares, controllers, services  </li> <li>Manual JWT parsing or unclear claim propagation  </li> <li>Mixing login session state with API token flows  </li> <li>Test environments bypass auth logic, causing drift from prod  </li> <li>Inconsistent roles or scope propagation across services</li> </ul>"},{"location":"categories/security/authn-authz-implementation/#better-auth-design-practices","title":"\u2705 Better Auth Design Practices","text":"<ul> <li>Centralize auth verification into a testable, composable unit  </li> <li>Use middleware for identity extraction\u2014but not decision logic  </li> <li>Define clear boundaries: AuthN (who?) vs AuthZ (can?)  </li> <li>Make roles, scopes, and tenants explicit in all internal requests  </li> <li>Test token expiration, claim tampering, and role confusion</li> </ul>"},{"location":"categories/security/authn-authz-implementation/#principle","title":"\u26a0\ufe0f Principle","text":"<p>You don\u2019t need custom auth. You need custom enforcement of clear intent.</p>"},{"location":"categories/security/authn-authz-implementation/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Should we roll our own auth? A: Rarely. Prefer platform-backed identity\u2014but enforce your own permission boundaries.</p> </li> <li> <p>Q: Can\u2019t middleware do everything? A: Middleware should extract identity\u2014not decide business intent.</p> </li> </ul>"},{"location":"categories/security/authn-authz-implementation/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Token lifecycle management  </li> <li>[ ] Role and scope propagation  </li> <li>[ ] Cross-service identity context  </li> </ul>"},{"location":"categories/security/confidential-data-handling/","title":"Is Confidential Data Being Handled Safely\u2014Not Just Accessed?","text":"<p>Type: DeepDive Category: Security Audience: Engineers working on authentication, API design, database access, or log inspection</p>"},{"location":"categories/security/confidential-data-handling/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Security isn\u2019t just about access. It\u2019s about impact when access is misused or leaked.</p> <p>What happens when:</p> <ul> <li>A log includes an email or token by mistake?  </li> <li>A screenshot reveals sensitive info in plaintext?  </li> <li>A debug export contains passwords?</li> </ul>"},{"location":"categories/security/confidential-data-handling/#unsafe-handling-patterns","title":"\ud83d\udea8 Unsafe Handling Patterns","text":"<ul> <li>Sensitive fields returned by default in APIs (e.g. name, email, phone)  </li> <li>Personally Identifiable Information (PII) stored in logs or metrics  </li> <li>Tokens, passwords, secrets shown in admin UIs or exports  </li> <li>Unencrypted fields in backup or async queues</li> </ul>"},{"location":"categories/security/confidential-data-handling/#safer-design-patterns","title":"\u2705 Safer Design Patterns","text":"<ul> <li>Mark sensitive fields explicitly in the schema (e.g. <code>@sensitive</code>)  </li> <li>Strip or redact fields before logging, exporting, or serialization  </li> <li>Separate auth tokens and business data in responses  </li> <li>Encrypt at rest and in transit\u2014not just one or the other  </li> <li>Test exports, debug dumps, and logs for sensitive fields before release</li> </ul>"},{"location":"categories/security/confidential-data-handling/#core-insight","title":"\u26a0\ufe0f Core Insight","text":"<p>Data doesn\u2019t become sensitive at runtime. It was always sensitive\u2014you just didn\u2019t label it.</p>"},{"location":"categories/security/confidential-data-handling/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t HTTPS enough? A: For transit, yes. But storage, logs, and exports are separate attack surfaces.</p> </li> <li> <p>Q: Should we just encrypt everything? A: Not blindly. Encryption without lifecycle awareness still leaks.</p> </li> </ul>"},{"location":"categories/security/confidential-data-handling/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Data classification and tagging  </li> <li>[ ] PII-aware schema design  </li> <li>[ ] Observability with privacy in mind  </li> </ul>"},{"location":"categories/test/acceptance-criteria-definition/","title":"Are the Acceptance Criteria Clearly Defined?","text":"<p>Type: Structure Category: Test Audience: Engineers, PMs, QA, and reviewers defining test scope or validating feature completion</p>"},{"location":"categories/test/acceptance-criteria-definition/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>You can\u2019t test what you can\u2019t define. And what\u2019s undefined becomes a source of conflict.</p>"},{"location":"categories/test/acceptance-criteria-definition/#common-mistakes","title":"\ud83d\udea8 Common Mistakes","text":"<ul> <li>No written criteria \u2192 \u201cDid we finish?\u201d becomes subjective  </li> <li>Dev and PM disagree on edge case expectations  </li> <li>Bug tickets without clear reproduction = untestable  </li> <li>\u201cAcceptance\u201d depends on mood, not milestone</li> </ul>"},{"location":"categories/test/acceptance-criteria-definition/#healthier-criteria-design","title":"\u2705 Healthier Criteria Design","text":"<ul> <li>Write acceptance as checklist or decision table\u2014not vague bullets  </li> <li>Clarify: What\u2019s in scope? What\u2019s not?  </li> <li>Document required inputs, preconditions, and boundary cases  </li> <li>Include user impact and business justification for each  </li> <li>Review with QA before implementation</li> </ul>"},{"location":"categories/test/acceptance-criteria-definition/#key-principle","title":"\u26a0\ufe0f Key Principle","text":"<p>Testing without criteria isn\u2019t testing. It\u2019s just opinion validation.</p>"},{"location":"categories/test/acceptance-criteria-definition/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Should PMs write acceptance tests? A: No\u2014but they must define what \u201cdone\u201d means.</p> </li> <li> <p>Q: Can tests evolve after release? A: Yes\u2014but changing the criteria = changing the contract.</p> </li> </ul>"},{"location":"categories/test/acceptance-criteria-definition/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Testable requirement writing  </li> <li>[ ] Contract-driven QA  </li> <li>[ ] Edge case coverage discussion  </li> </ul>"},{"location":"categories/test/high-load-behavior-testing/","title":"Is Load Behavior Under Stress Explicitly Tested?","text":"<p>Type: DeepDive Category: Test Audience: SREs, backend leads, QA engineers responsible for system resilience and scale</p>"},{"location":"categories/test/high-load-behavior-testing/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Functional tests pass. Even performance tests might pass. But under stress\u2014systems don\u2019t just slow down. They break.</p>"},{"location":"categories/test/high-load-behavior-testing/#typical-misses","title":"\ud83d\udea8 Typical Misses","text":"<ul> <li>Load tests stop at 80% CPU and never cross failure point  </li> <li>No simulation of retry storms, queue overflow, or memory saturation  </li> <li>Failure modes are untested: latency spikes, cascading failures, timeouts  </li> <li>SLOs assume averages\u2014but user pain hides in the tail</li> </ul>"},{"location":"categories/test/high-load-behavior-testing/#resilience-testing-strategy","title":"\u2705 Resilience Testing Strategy","text":"<ul> <li>Define failure thresholds: latency spike? error rate? resource usage?  </li> <li>Test retry behavior, backpressure, timeouts under real contention  </li> <li>Simulate partial outages or degraded upstreams  </li> <li>Observe auto-recovery, circuit breaking, alerting response  </li> <li>Run chaos tests (within scoped blast radius) before peak seasons</li> </ul>"},{"location":"categories/test/high-load-behavior-testing/#core-insight","title":"\u26a0\ufe0f Core Insight","text":"<p>A stable system under light load proves nothing. Only under pressure does architecture reveal its fault lines.</p>"},{"location":"categories/test/high-load-behavior-testing/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t this just performance testing? A: No. This is testing failure under load\u2014not just slowness.</p> </li> <li> <p>Q: What if the test breaks things? A: That\u2019s the point. Better to break it intentionally.</p> </li> </ul>"},{"location":"categories/test/high-load-behavior-testing/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Performance degradation modeling  </li> <li>[ ] Graceful failure design  </li> <li>[ ] Chaos engineering readiness  </li> </ul>"},{"location":"categories/test/impact-scope-analysis/","title":"Is the Impact Scope of This Change Clearly Understood?","text":"<p>Type: Structure Category: Test Audience: Engineers writing tests, reviewers checking risk, or teams preparing releases</p>"},{"location":"categories/test/impact-scope-analysis/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Testing is not only about what changed\u2014 but what the change might touch.</p>"},{"location":"categories/test/impact-scope-analysis/#blind-spot-patterns","title":"\ud83d\udea8 Blind Spot Patterns","text":"<ul> <li>Code paths modified, but dependent behavior left untested  </li> <li>Flags or conditionals hide risk in less-used flows  </li> <li>Shared components updated with no regression test sweep  </li> <li>Devs test \u201cthe feature\u201d but not \u201cthe impact\u201d</li> </ul>"},{"location":"categories/test/impact-scope-analysis/#safer-impact-modeling","title":"\u2705 Safer Impact Modeling","text":"<ul> <li>Map upstream and downstream dependencies for the change  </li> <li>Use code search or coverage diff tools to explore affected areas  </li> <li>Review \u201cwhat else calls this\u201d\u2014not just what\u2019s inside  </li> <li>Treat shared utilities or schemas as multi-context risks  </li> <li>Ask \u201cwho would be surprised by this change?\u201d</li> </ul>"},{"location":"categories/test/impact-scope-analysis/#key-principle","title":"\u26a0\ufe0f Key Principle","text":"<p>Good testing is risk tracing. Not just behavior checking.</p>"},{"location":"categories/test/impact-scope-analysis/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t test coverage enough? A: No. Coverage doesn\u2019t mean the right behavior is tested.</p> </li> <li> <p>Q: Should reviewers repeat what CI does? A: No. Reviewers should think beyond it.</p> </li> </ul>"},{"location":"categories/test/impact-scope-analysis/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Change impact mapping  </li> <li>[ ] Shared component test planning  </li> <li>[ ] Contextual regression analysis  </li> </ul>"},{"location":"categories/test/performance-test-plan/","title":"Has the Need for Performance Testing Been Assessed?","text":"<p>Type: DeepDive Category: Test Audience: QA engineers, performance architects, and reviewers of high-traffic or complex systems</p>"},{"location":"categories/test/performance-test-plan/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Performance is not a trait. It\u2019s a commitment\u2014and must be proven.</p>"},{"location":"categories/test/performance-test-plan/#common-omissions","title":"\ud83d\udea8 Common Omissions","text":"<ul> <li>No test plan for API under load, despite expected concurrency  </li> <li>\u201cPerformance\u201d assumed because staging was fast  </li> <li>DB load patterns not simulated (e.g. long tail, batch updates)  </li> <li>No thresholds defined: what is \u201cslow\u201d? what is \u201cacceptable\u201d?</li> </ul>"},{"location":"categories/test/performance-test-plan/#healthier-performance-design","title":"\u2705 Healthier Performance Design","text":"<ul> <li>Decide: is perf testing needed? when? what endpoints or flows?  </li> <li>Define load shape: bursty? spiky? sustained?  </li> <li>Prepare test data to mimic real-world skew  </li> <li>Measure tail latency and failure rates\u2014not just averages  </li> <li>Include perf test outcomes in release Go/No-Go</li> </ul>"},{"location":"categories/test/performance-test-plan/#key-principle","title":"\u26a0\ufe0f Key Principle","text":"<p>Latency isn\u2019t a number. It\u2019s a contractual boundary that must be honored under pressure.</p>"},{"location":"categories/test/performance-test-plan/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t CI/CD enough to detect slowness? A: No. Load must be synthetic, controlled, and scenario-aware.</p> </li> <li> <p>Q: What if we can\u2019t test full scale? A: Test bottlenecks under partial load with extrapolation.</p> </li> </ul>"},{"location":"categories/test/performance-test-plan/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Load pattern modeling  </li> <li>[ ] Failure rate under stress  </li> <li>[ ] Test-data realism for tail scenarios  </li> </ul>"},{"location":"categories/ui/component-reuse-impact/","title":"Is Component Reuse Helping or Hurting Your UI?","text":"<p>Type: Structure Category: UI Audience: Frontend engineers, designers, or architects working on component-based design systems</p>"},{"location":"categories/ui/component-reuse-impact/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Component reuse is not always virtuous. When overdone, it creates:</p> <ul> <li>Tight coupling across pages  </li> <li>Unexpected regressions when shared logic shifts  </li> <li>Unclear ownership: \u201cWho owns this state?\u201d</li> </ul>"},{"location":"categories/ui/component-reuse-impact/#harmful-reuse-patterns","title":"\ud83d\udea8 Harmful Reuse Patterns","text":"<ul> <li>Component behavior changes break other screens  </li> <li>Business-specific behavior embedded in \u201ccommon\u201d components  </li> <li>Global styling overrides cause layout fragility  </li> <li>Designers can\u2019t update visuals without risking cross-app changes</li> </ul>"},{"location":"categories/ui/component-reuse-impact/#better-reuse-strategies","title":"\u2705 Better Reuse Strategies","text":"<ul> <li>Split \u201cgeneric\u201d from \u201cbusiness\u201d logic in components  </li> <li>Use adapter/wrapper patterns to preserve local override  </li> <li>Treat common components as APIs\u2014not just code reuse  </li> <li>Write contract-based snapshot tests for shared UI  </li> <li>Version shared packages even inside monorepos</li> </ul>"},{"location":"categories/ui/component-reuse-impact/#core-principle","title":"\u26a0\ufe0f Core Principle","text":"<p>Reusable is not the same as safe to reuse.</p>"},{"location":"categories/ui/component-reuse-impact/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Isn\u2019t DRY always good? A: Not if it creates shared risk across pages.</p> </li> <li> <p>Q: Can\u2019t design systems enforce consistency? A: Yes\u2014but also create risk amplification.</p> </li> </ul>"},{"location":"categories/ui/component-reuse-impact/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Frontend test scope per component  </li> <li>[ ] Shared UI governance  </li> <li>[ ] Multi-product design strategy  </li> </ul>"},{"location":"categories/ui/data-volume-visibility/","title":"Is Your UI Designed to Handle Large Data Volumes Gracefully?","text":"<p>Type: Structure Category: UI Audience: Frontend engineers, product designers, and backend engineers defining pagination or filters</p>"},{"location":"categories/ui/data-volume-visibility/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>A good UI shows just enough.</p> <p>Not too little. Not too much. And never too slow.</p>"},{"location":"categories/ui/data-volume-visibility/#ui-load-pitfalls","title":"\ud83d\udea8 UI Load Pitfalls","text":"<ul> <li>Fetch-all endpoints crash browsers with large result sets  </li> <li>Slow tables that rerender entire DOM trees for 1000+ rows  </li> <li>Users can\u2019t filter or search \u2192 manually scroll and scan  </li> <li>Data arrives async, but layout is designed for sync</li> </ul>"},{"location":"categories/ui/data-volume-visibility/#healthier-load-strategies","title":"\u2705 Healthier Load Strategies","text":"<ul> <li>Define and enforce page size limits in API + UI  </li> <li>Provide filters, search, and progressive disclosure by default  </li> <li>Render skeletons or optimistic placeholders to mask delay  </li> <li>Prefetch adjacent pages, but load incrementally  </li> <li>Consider adaptive pagination for high-data users</li> </ul>"},{"location":"categories/ui/data-volume-visibility/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Performance isn\u2019t just speed. It\u2019s perceived responsiveness.</p>"},{"location":"categories/ui/data-volume-visibility/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can\u2019t we just paginate everything? A: Not if users need to search before loading a page.</p> </li> <li> <p>Q: Should frontend show a spinner? A: Only if it explains the delay.</p> </li> </ul>"},{"location":"categories/ui/data-volume-visibility/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Query design for user-facing load  </li> <li>[ ] Async visibility in UI  </li> <li>[ ] Filtering and index alignment  </li> </ul>"},{"location":"categories/ui/notification-localization/","title":"Is Notification Design Translation-Ready?","text":"<p>Type: Structure Category: UI Audience: Engineers and designers building email, in-app, or system notifications</p>"},{"location":"categories/ui/notification-localization/#what-this-perspective-covers","title":"\ud83e\udde0 What This Perspective Covers","text":"<p>Notifications aren\u2019t copywriting. They are structured communication with:</p> <ul> <li>Audience  </li> <li>Timing  </li> <li>Action intent  </li> <li>Multilingual risks</li> </ul>"},{"location":"categories/ui/notification-localization/#typical-issues","title":"\ud83d\udea8 Typical Issues","text":"<ul> <li>Hardcoded messages baked into backend or scripts  </li> <li>Business terms untranslated or ambiguous  </li> <li>HTML + plaintext emails generated differently  </li> <li>No preview/test for multilingual rendering</li> </ul>"},{"location":"categories/ui/notification-localization/#notification-design-principles","title":"\u2705 Notification Design Principles","text":"<ul> <li>Design notifications as message objects\u2014not ad hoc strings  </li> <li>Separate content, logic, and delivery transport  </li> <li>Include locale, audience, and fallback strategy in message contract  </li> <li>Use keys and structured templates for translation compatibility  </li> <li>Enable staging/testing flows for QA to verify wording and rendering</li> </ul>"},{"location":"categories/ui/notification-localization/#principle","title":"\u26a0\ufe0f Principle","text":"<p>Message is a product\u2014 it must be versioned, tested, and owned.</p>"},{"location":"categories/ui/notification-localization/#faq","title":"\u2753 FAQ","text":"<ul> <li> <p>Q: Can devs write notification text directly? A: Only if the team can preview and test it before sending.</p> </li> <li> <p>Q: Is translation the PM\u2019s job? A: Language is everyone\u2019s responsibility once the product is global.</p> </li> </ul>"},{"location":"categories/ui/notification-localization/#related-perspectives","title":"\ud83d\udd17 Related Perspectives","text":"<ul> <li>[ ] Message contract schema  </li> <li>[ ] Translation-safe notification pipelines  </li> <li>[ ] Multilingual staging support  </li> </ul>"}]}